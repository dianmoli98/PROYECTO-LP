
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS AND ANY ARRAY COMMA COMMENT CONST DECREMENT DIVIDE DOLLAR ELIF ELSE ENUM EQUAL EQUALTO FALSE FLOAT FOR FUNCTIONADD FUNCTIONCHARAT FUNCTIONCONCAT FUNCTIONFILTER FUNCTIONHAS FUNCTIONJOIN FUNCTIONSPLIT FUNMATH GREATER IF IN INCREMENT INSTANCEOF LBRACKET LCOMILLA LESS LET LKEY LPAREN MINUS MOD MULTICOMMENT MULTISTRING NEGATION NEW NORMSTRING1 NORMSTRING2 NOTEQUALTO NULL NUMBER OBJECTNAME OR PLUS POINT POINTCOMMA POW PRINT PRODUCT RBRACKET RCOMILLA RKEY ROUND RPAREN SET SPECIAL STATIC TRUE TWOPOINTS TYPEOF UNDEFINED VAR VARBOOLEAN VARIABLE VARNUMBER VAROBJECT VARSTRING WHILEall : statement\n    | concatenate\n    | assignassign : var_booleanvar_boolean : declare_any EQUAL boolean\n    | declare_boolean EQUAL booleandeclare_boolean : prefix VARIABLE TWOPOINTS VARBOOLEANdeclare_any : prefix VARIABLEconcatenate : termStermS : string PLUS chainchain : termS PLUS value\n    | valuevalue : expression\n    | stringstatement : expressionexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term PRODUCT factorterm : term DIVIDE factorterm : factorprefix : LET\n    | VAR\n    | STATIC\n    | CONSTstring : NORMSTRING1boolean : TRUE\n    | FALSEfactor : NUMBER\n    | FLOATfactor : VARIABLEfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'NORMSTRING1':([0,27,47,],[13,13,13,]),'NUMBER':([0,18,23,24,25,26,27,47,],[16,16,16,16,16,16,16,16,]),'FLOAT':([0,18,23,24,25,26,27,47,],[17,17,17,17,17,17,17,17,]),'VARIABLE':([0,14,18,19,20,21,22,23,24,25,26,27,47,],[15,30,15,-22,-23,-24,-25,15,15,15,15,15,15,]),'LPAREN':([0,18,23,24,25,26,27,47,],[18,18,18,18,18,18,18,18,]),'LET':([0,],[19,]),'VAR':([0,],[20,]),'STATIC':([0,],[21,]),'CONST':([0,],[22,]),'$end':([1,2,3,4,5,6,7,8,12,13,15,16,17,32,33,34,35,36,37,39,40,41,42,43,44,46,49,50,],[0,-1,-2,-3,-15,-9,-4,-18,-21,-26,-31,-29,-30,-16,-17,-19,-20,-14,-10,-12,-13,-5,-27,-28,-6,-32,-11,-14,]),'PLUS':([5,8,9,12,13,15,16,17,31,32,33,34,35,36,37,38,39,40,46,49,50,],[23,-18,27,-21,-26,-31,-29,-30,23,-16,-17,-19,-20,27,-10,47,-12,23,-32,-11,-14,]),'MINUS':([5,8,12,15,16,17,31,32,33,34,35,40,46,],[24,-18,-21,-31,-29,-30,24,-16,-17,-19,-20,24,-32,]),'RPAREN':([8,12,15,16,17,31,32,33,34,35,46,],[-18,-21,-31,-29,-30,46,-16,-17,-19,-20,-32,]),'PRODUCT':([8,12,15,16,17,32,33,34,35,46,],[25,-21,-31,-29,-30,25,25,-19,-20,-32,]),'DIVIDE':([8,12,15,16,17,32,33,34,35,46,],[26,-21,-31,-29,-30,26,26,-19,-20,-32,]),'EQUAL':([10,11,30,48,],[28,29,-8,-7,]),'TRUE':([28,29,],[42,42,]),'FALSE':([28,29,],[43,43,]),'TWOPOINTS':([30,],[45,]),'VARBOOLEAN':([45,],[48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'all':([0,],[1,]),'statement':([0,],[2,]),'concatenate':([0,],[3,]),'assign':([0,],[4,]),'expression':([0,18,27,47,],[5,31,40,40,]),'termS':([0,27,],[6,38,]),'var_boolean':([0,],[7,]),'term':([0,18,23,24,27,47,],[8,8,32,33,8,8,]),'string':([0,27,47,],[9,36,50,]),'declare_any':([0,],[10,]),'declare_boolean':([0,],[11,]),'factor':([0,18,23,24,25,26,27,47,],[12,12,12,12,34,35,12,12,]),'prefix':([0,],[14,]),'chain':([27,],[37,]),'value':([27,47,],[39,49,]),'boolean':([28,29,],[41,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> all","S'",1,None,None,None),
  ('all -> statement','all',1,'p_all','sintacticoNewLang.py',7),
  ('all -> concatenate','all',1,'p_all','sintacticoNewLang.py',8),
  ('all -> assign','all',1,'p_all','sintacticoNewLang.py',9),
  ('assign -> var_boolean','assign',1,'p_assign','sintacticoNewLang.py',14),
  ('var_boolean -> declare_any EQUAL boolean','var_boolean',3,'p_var_boolean','sintacticoNewLang.py',19),
  ('var_boolean -> declare_boolean EQUAL boolean','var_boolean',3,'p_var_boolean','sintacticoNewLang.py',20),
  ('declare_boolean -> prefix VARIABLE TWOPOINTS VARBOOLEAN','declare_boolean',4,'p_declare_boolean','sintacticoNewLang.py',24),
  ('declare_any -> prefix VARIABLE','declare_any',2,'p_declare_any','sintacticoNewLang.py',28),
  ('concatenate -> termS','concatenate',1,'p_concatenate','sintacticoNewLang.py',32),
  ('termS -> string PLUS chain','termS',3,'p_concatenate_termS','sintacticoNewLang.py',36),
  ('chain -> termS PLUS value','chain',3,'p_chain','sintacticoNewLang.py',40),
  ('chain -> value','chain',1,'p_chain','sintacticoNewLang.py',41),
  ('value -> expression','value',1,'p_value','sintacticoNewLang.py',44),
  ('value -> string','value',1,'p_value','sintacticoNewLang.py',45),
  ('statement -> expression','statement',1,'p_statement_expression','sintacticoNewLang.py',49),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintacticoNewLang.py',54),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintacticoNewLang.py',59),
  ('expression -> term','expression',1,'p_expression_term','sintacticoNewLang.py',64),
  ('term -> term PRODUCT factor','term',3,'p_term_product','sintacticoNewLang.py',68),
  ('term -> term DIVIDE factor','term',3,'p_term_div','sintacticoNewLang.py',73),
  ('term -> factor','term',1,'p_term_factor','sintacticoNewLang.py',77),
  ('prefix -> LET','prefix',1,'p_prefix','sintacticoNewLang.py',82),
  ('prefix -> VAR','prefix',1,'p_prefix','sintacticoNewLang.py',83),
  ('prefix -> STATIC','prefix',1,'p_prefix','sintacticoNewLang.py',84),
  ('prefix -> CONST','prefix',1,'p_prefix','sintacticoNewLang.py',85),
  ('string -> NORMSTRING1','string',1,'p_string','sintacticoNewLang.py',88),
  ('boolean -> TRUE','boolean',1,'p_boolean_value','sintacticoNewLang.py',91),
  ('boolean -> FALSE','boolean',1,'p_boolean_value','sintacticoNewLang.py',92),
  ('factor -> NUMBER','factor',1,'p_factor_num','sintacticoNewLang.py',95),
  ('factor -> FLOAT','factor',1,'p_factor_num','sintacticoNewLang.py',96),
  ('factor -> VARIABLE','factor',1,'p_factor_var','sintacticoNewLang.py',100),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','sintacticoNewLang.py',104),
]
