
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS AND ANY ARRAY COMMA COMMENT CONST DECREMENT DIVIDE DOLLAR ELIF ELSE ENUM EQUAL EQUALTO FALSE FLOAT FOR FUNCTIONADD FUNCTIONCHARAT FUNCTIONCONCAT FUNCTIONFILTER FUNCTIONHAS FUNCTIONJOIN FUNCTIONSPLIT FUNMATH GREATER GREATEREQUAL IF IN INCREMENT INSTANCEOF LBRACKET LCOMILLA LESS LESSEQUAL LET LKEY LPAREN MINUS MOD MULTICOMMENT MULTISTRING NEGATION NEW NORMSTRING1 NORMSTRING2 NOTEQUALTO NULL NUMBER OBJECTNAME OR PLUS POINT POINTCOMMA POW PRINT PRODUCT RBRACKET RCOMILLA RKEY ROUND RPAREN SET SPECIAL STATIC TRUE TWOPOINTS TYPEOF UNDEFINED VAR VARBOOLEAN VARIABLE VARNUMBER VAROBJECT VARSTRING WHILEstatement : statement_value\n    | statement_value POINTCOMMAstatement_value : expression\n    | concatenate\n    | declare\n    | assign\n    | expCond\n    | expOpLog\n    | expNeg\n    | expEq\n    | expNotEq\n    | exp_set\n    | statement_controlstatement_control : funcionif\n    | funcionwhile\n    | funcionfordeclare : var_boolean\n    | var_number\n    | var_string\n    | var_enum\n    | var_null\n    | var_undefined\n    | declare_array\n    | declare_enum\n    | declare_genericdeclare_enum : ENUM OBJECTNAME LKEY enums RKEYenums : enums_numeric\n    | enums_stringenums_numeric : enums_numeric COMMA enums_numeric_value\n    | enums_numeric_valueenums_numeric_value : object_name EQUAL number\n    | object_nameenums_string : enums_string COMMA enums_string_value\n    | enums_string_valueenums_string_value : object_name EQUAL stringfuncionif : IF LPAREN formLog RPAREN substatement\n    | IF LPAREN formLog RPAREN substatement funcionelif\n    | IF LPAREN formLog RPAREN substatement funcionelif funcionelse\n    | IF LPAREN formLog RPAREN substatement funcionelse\n    funcionelif : ELIF LPAREN formLog RPAREN substatement\n    | ELIF LPAREN formLog RPAREN substatement funcionelif funcionelse : ELSE substatementfuncionfor : FOR LPAREN declare_any EQUAL number_value POINTCOMMA formLog POINTCOMMA VARIABLE operador RPAREN substatement\n    | FOR LPAREN VARIABLE EQUAL number_value POINTCOMMA formLog POINTCOMMA VARIABLE operador RPAREN substatement\n    funcionwhile : WHILE LPAREN formLog RPAREN substatement\n    substatement : LKEY statement RKEY\n    | LKEY RKEYexp_set : declare_any EQUAL NEW SET LPAREN RPARENdeclare_array : declare_array_main_number\n    | declare_array_main_boolean\n    | declare_array_main_string\n    | declare_generic_arraydeclare_array_main_number : declare_array_number EQUAL list_number\n    | declare_array_numberdeclare_array_number : declare_number LBRACKET RBRACKET\n    | declare_any TWOPOINTS ARRAY LESS VARNUMBER GREATERdeclare_array_main_boolean : declare_array_boolean EQUAL list_boolean\n    | declare_array_booleandeclare_array_boolean : declare_boolean LBRACKET RBRACKET\n    | declare_any TWOPOINTS ARRAY LESS VARBOOLEAN GREATERdeclare_array_main_string : declare_array_string EQUAL list_string\n    | declare_array_stringdeclare_array_string : declare_string LBRACKET RBRACKET\n    | declare_any TWOPOINTS ARRAY LESS VARSTRING GREATERdeclare_generic_array : declare_any EQUAL list_typesvar_null : declare_any EQUAL NULLvar_undefined : declare_any EQUAL UNDEFINEDvar_number : declare_number EQUAL number_value\n    | declare_numberdeclare_number : declare_any TWOPOINTS VARNUMBERvar_boolean : declare_boolean EQUAL boolean_value\n    | declare_booleandeclare_boolean : declare_any TWOPOINTS VARBOOLEANvar_string : declare_string EQUAL string_value\n    | declare_stringdeclare_string : declare_any TWOPOINTS VARSTRINGvar_enum : declare_var_enum EQUAL enum_value\n    | declare_var_enumdeclare_var_enum : declare_any TWOPOINTS object_namedeclare_generic : declare_any EQUAL assign_value\n    | declare_anydeclare_any : prefix VARIABLEassign : assign_variable\n    | assign_array\n    | assign_object_valueassign_variable : variable EQUAL assign_value\n    | variable EQUAL list_typesassign_array : array_value EQUAL general_valueassign_object_value : object_value_form1 EQUAL general_value\n    | object_value_form1 EQUAL list_types\n    | object_value_form2 EQUAL general_valueassign_value : general_value\n    | object_definitionobject_definition : LKEY attributes RKEYattributes : attributes COMMA attribute\n    | attributeattribute : variable TWOPOINTS general_value\n    | variable TWOPOINTS list_typesgeneral_value : expression\n    | boolean\n    | string\n    | expCond\n    | expOpLog\n    | expNeg\n    | expEq\n    | expNotEqlist_types : list_number\n    | list_boolean\n    | list_stringlist_number : LBRACKET numbers RBRACKETnumbers : numbers COMMA number_value\n    | number_valuelist_boolean : LBRACKET booleans RBRACKETbooleans : booleans COMMA boolean_value\n    | boolean_valuelist_string : LBRACKET strings RBRACKETstrings : strings COMMA string_value\n    | string_valuenumber_value : expressionboolean_value : boolean\n    | other_value\n    | expCond\n    | expOpLog\n    | expNeg\n    | expEq\n    | expNotEqstring_value : string\n    | other_valueconcatenate : termStermS : string PLUS chainchain : termS PLUS value\n    | valuevalue : expression\n    | stringexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term PRODUCT termterm : term DIVIDE termterm : term1 INCREMENT\n    | INCREMENT  term1term : term1 DECREMENT\n     | DECREMENT  term1expNeg : NEGATION expOpLog\n        | NEGATION factor_exprlog\n        | NEGATION boolean\n        | NEGATION LPAREN expOpLog RPARENexpEq : expCond EQUALTO expCond\n    | factor_exprlog  EQUALTO factor_exprlog\n    | expression EQUALTO expression  expNotEq : expCond NOTEQUALTO expCond\n    | factor_exprlog  NOTEQUALTO factor_exprlog\n    | expression NOTEQUALTO expression  expOpLog : expCond oplogico expCond\n    | factor_exprlog  oplogico factor_exprlog\n    | expression oplogico expressionfactor_exprlog : LPAREN expCond RPARENexpCond : expression operador expression\n    | LPAREN expression operador expression RPARENterm1 : LPAREN group RPAREN\n    | groupgroup : number\n    | variable\n    | array_value\n    | object_valueterm : number\n    | factor_expr\n    | other_valuefactor_expr : LPAREN expression RPARENother_value : variable\n    | array_value\n    | enum_value\n    | object_valueformLog : expCond\n       | expOpLogobject_value : object_value_form1\n    | object_value_form2object_value_form1 : variable POINT variableobject_value_form2 : variable POINT array_valuearray_value : variable LBRACKET expression RBRACKETenum_value : object_name POINT object_nameprefix : LET\n    | VAR\n    | STATIC\n    | CONSTtypedate : VARNUMBER\n        | VARSTRING\n        | VARBOOLEAN\n        | ENUMnumber : NUMBER\n    | FLOATstring : NORMSTRING1\n    | NORMSTRING2\n    | MULTISTRINGboolean : TRUE\n    | FALSEvariable : VARIABLEobject_name : OBJECTNAMEoperador : GREATER\n      | LESS\n      | GREATEREQUAL\n      | LESSEQUAL\n      | EQUALTO\n      | NOTEQUALTOoplogico : AND\n      | OR'
    
_lr_action_items = {'LPAREN':([0,28,30,36,37,59,60,61,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,111,118,129,130,132,138,139,141,142,143,145,146,153,166,168,169,173,199,252,254,259,262,275,285,286,292,294,296,309,331,335,336,340,],[28,95,111,123,123,145,146,147,153,153,153,153,153,153,-199,-200,-201,-202,-205,-206,95,95,95,153,153,153,173,173,173,28,28,153,28,153,28,153,28,28,28,28,28,153,153,-203,-204,95,28,153,28,153,289,153,153,153,28,153,28,28,340,28,28,28,]),'NEGATION':([0,118,130,138,141,142,143,199,254,292,296,309,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'INCREMENT':([0,28,30,35,38,53,54,55,56,58,62,63,64,65,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,99,100,101,102,103,104,111,116,117,118,129,130,132,138,139,141,142,143,145,146,153,166,168,169,171,173,199,219,237,238,252,254,258,259,275,282,285,286,292,294,296,309,335,336,340,],[36,36,36,120,-162,-163,-164,-176,-177,-197,-161,-190,-191,-165,36,36,36,36,36,36,-199,-200,-201,-202,-205,-206,36,36,36,36,36,36,-161,-162,-163,-164,-165,-176,-177,36,-163,-164,36,36,36,36,36,36,36,36,36,36,36,36,36,-203,-204,-160,36,36,-163,-178,-179,36,36,-163,36,36,-180,36,36,36,36,36,36,36,36,36,]),'DECREMENT':([0,28,30,35,38,53,54,55,56,58,62,63,64,65,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,99,100,101,102,103,104,111,116,117,118,129,130,132,138,139,141,142,143,145,146,153,166,168,169,171,173,199,219,237,238,252,254,258,259,275,282,285,286,292,294,296,309,335,336,340,],[37,37,37,121,-162,-163,-164,-176,-177,-197,-161,-190,-191,-165,37,37,37,37,37,37,-199,-200,-201,-202,-205,-206,37,37,37,37,37,37,-161,-162,-163,-164,-165,-176,-177,37,-163,-164,37,37,37,37,37,37,37,37,37,37,37,37,37,-203,-204,-160,37,37,-163,-178,-179,37,37,-163,37,37,-180,37,37,37,37,37,37,37,37,37,]),'ENUM':([0,309,],[51,51,]),'IF':([0,309,],[59,59,]),'WHILE':([0,309,],[60,60,]),'FOR':([0,309,],[61,61,]),'NUMBER':([0,28,30,36,37,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,111,118,123,129,130,132,138,139,141,142,143,145,146,153,166,168,169,173,199,252,254,259,275,285,286,292,294,296,307,309,335,336,337,340,],[63,63,63,63,63,63,63,63,63,63,63,-199,-200,-201,-202,-205,-206,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-203,-204,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'FLOAT':([0,28,30,36,37,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,111,118,123,129,130,132,138,139,141,142,143,145,146,153,166,168,169,173,199,252,254,259,275,285,286,292,294,296,307,309,335,336,337,340,],[64,64,64,64,64,64,64,64,64,64,64,-199,-200,-201,-202,-205,-206,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-203,-204,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'NORMSTRING1':([0,118,129,134,138,141,142,143,199,256,275,292,298,307,309,338,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'NORMSTRING2':([0,118,129,134,138,141,142,143,199,256,275,292,298,307,309,338,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'MULTISTRING':([0,118,129,134,138,141,142,143,199,256,275,292,298,307,309,338,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'VARIABLE':([0,28,30,36,37,57,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,111,118,123,129,130,132,134,138,139,140,141,142,143,145,146,147,153,166,168,169,173,198,199,252,254,256,259,275,285,286,291,292,294,296,298,309,335,336,340,346,347,],[58,58,58,58,58,144,-182,-183,-184,-185,58,58,58,58,58,58,-199,-200,-201,-202,-205,-206,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,249,58,58,-203,-204,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,349,350,]),'LET':([0,147,309,],[73,73,73,]),'VAR':([0,147,309,],[74,74,74,]),'STATIC':([0,147,309,],[75,75,75,]),'CONST':([0,147,309,],[76,76,76,]),'OBJECTNAME':([0,28,30,51,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,111,118,119,129,130,132,134,136,138,139,141,142,143,145,146,148,153,166,168,169,173,199,233,252,254,256,259,275,285,286,292,294,296,298,305,306,309,335,336,340,],[52,52,52,137,52,52,52,52,52,52,-199,-200,-201,-202,-205,-206,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-203,-204,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,38,39,40,42,43,44,45,46,47,48,49,50,52,53,54,55,56,58,62,63,64,65,66,67,68,70,71,72,77,103,104,108,109,110,114,115,116,117,120,121,122,124,125,126,127,128,144,152,154,155,156,157,158,159,161,162,163,164,167,170,171,172,174,175,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,200,201,202,203,206,207,209,210,211,212,213,214,215,216,217,218,219,221,222,223,224,225,226,227,228,229,230,231,232,234,235,237,238,239,240,241,242,250,251,253,255,261,282,288,290,293,295,297,302,303,304,308,310,313,320,321,322,329,330,334,339,341,342,351,354,357,358,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-137,-129,-17,-18,-19,-20,-21,-22,-23,-24,-25,-83,-84,-85,-81,-14,-15,-16,-166,-167,-168,-72,-69,-75,-78,-172,-49,-50,-51,-52,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-192,-193,-194,-54,-58,-62,-2,-176,-177,-144,-145,-146,-195,-196,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-82,-135,-136,-158,-156,-150,-153,-154,-148,-151,-138,-139,-169,-157,-160,-155,-149,-152,-66,-67,-80,-65,-92,-93,-107,-108,-109,-99,-100,-101,-102,-103,-104,-105,-106,-73,-70,-76,-79,-134,-130,-132,-133,-71,-120,-121,-122,-123,-124,-125,-126,-170,-59,-68,-119,-55,-74,-127,-128,-170,-171,-173,-63,-77,-86,-87,-178,-179,-88,-89,-90,-91,-181,-53,-57,-61,-147,-180,-159,-94,-110,-113,-116,-131,-134,-26,-36,-45,-48,-56,-60,-64,-37,-39,-47,-38,-42,-46,-40,-41,-43,-44,]),'RKEY':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,38,39,40,42,43,44,45,46,47,48,49,50,52,53,54,55,56,58,62,63,64,65,66,67,68,70,71,72,77,103,104,108,109,110,114,115,116,117,120,121,122,124,125,126,127,128,144,152,154,155,156,157,158,159,161,162,163,164,167,170,171,172,174,175,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,200,201,202,203,206,207,209,210,211,212,213,214,215,216,217,218,219,221,222,223,224,225,226,227,228,229,230,231,232,234,235,237,238,239,240,241,242,250,251,253,255,261,263,264,276,277,278,279,280,281,282,288,290,293,295,297,302,303,304,308,309,310,313,314,315,316,320,321,322,323,324,325,327,328,329,330,333,334,339,341,342,351,354,357,358,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-137,-129,-17,-18,-19,-20,-21,-22,-23,-24,-25,-83,-84,-85,-81,-14,-15,-16,-166,-167,-168,-72,-69,-75,-78,-172,-49,-50,-51,-52,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-192,-193,-194,-54,-58,-62,-2,-176,-177,-144,-145,-146,-195,-196,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-82,-135,-136,-158,-156,-150,-153,-154,-148,-151,-138,-139,-169,-157,-160,-155,-149,-152,-66,-67,-80,-65,-92,-93,-107,-108,-109,-99,-100,-101,-102,-103,-104,-105,-106,-73,-70,-76,-79,-134,-130,-132,-133,-71,-120,-121,-122,-123,-124,-125,-126,-170,-59,-68,-119,-55,-74,-127,-128,-170,-171,-173,-63,-77,-86,-87,-178,-179,-88,-89,-90,-91,-181,-53,-57,-61,-147,290,-96,304,-27,-28,-30,-34,-32,-180,-159,-94,-110,-113,-116,-131,-134,-26,-36,334,-45,-48,-95,-97,-98,-56,-60,-64,-29,-32,-33,-31,-35,-37,-39,342,-47,-38,-42,-46,-40,-41,-43,-44,]),'POINTCOMMA':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,38,39,40,42,43,44,45,46,47,48,49,50,52,53,54,55,56,58,62,63,64,65,66,67,68,70,71,72,103,104,108,109,110,114,115,116,117,120,121,122,124,125,126,127,128,144,152,154,155,156,157,158,159,161,162,163,164,167,170,171,172,174,175,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,200,201,202,203,206,207,209,210,211,212,213,214,215,216,217,218,219,221,222,223,224,225,226,227,228,229,230,231,232,234,235,237,238,239,240,241,242,244,245,250,251,253,255,261,282,288,290,293,295,297,302,303,304,308,310,311,312,313,320,321,322,329,330,334,339,341,342,343,344,351,354,357,358,],[77,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-137,-129,-17,-18,-19,-20,-21,-22,-23,-24,-25,-83,-84,-85,-81,-14,-15,-16,-166,-167,-168,-72,-69,-75,-78,-172,-49,-50,-51,-52,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-192,-193,-194,-54,-58,-62,-176,-177,-144,-145,-146,-195,-196,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-82,-135,-136,-158,-156,-150,-153,-154,-148,-151,-138,-139,-169,-157,-160,-155,-149,-152,-66,-67,-80,-65,-92,-93,-107,-108,-109,-99,-100,-101,-102,-103,-104,-105,-106,-73,-70,-76,-79,-134,-130,-132,-133,-71,-120,-121,-122,-123,-124,-125,-126,-170,-59,-68,-119,-55,-74,-127,-128,-170,-171,-173,-63,-77,-86,-87,-178,-179,-88,-89,-90,-91,-174,-175,-181,-53,-57,-61,-147,-180,-159,-94,-110,-113,-116,-131,-134,-26,-36,-45,335,336,-48,-56,-60,-64,-37,-39,-47,-38,-42,-46,346,347,-40,-41,-43,-44,]),'PLUS':([3,14,38,39,40,41,46,52,53,54,55,56,58,62,63,64,65,66,67,68,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,155,156,157,158,160,163,164,165,167,171,178,190,206,207,208,209,210,213,219,220,223,236,237,238,246,250,257,258,260,272,273,282,287,302,303,],[78,-137,-166,-167,-168,129,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-192,-193,-194,78,-166,-170,-171,-173,-176,-177,78,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,78,78,78,78,78,-138,-139,78,-169,-160,78,78,129,-130,275,-132,78,-168,-170,78,78,78,-178,-179,78,-181,78,-170,78,78,-168,-180,78,-131,-134,]),'MINUS':([3,14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,155,156,157,158,160,163,164,165,167,171,178,190,210,213,219,220,223,236,237,238,246,250,257,258,260,272,273,282,287,],[79,-137,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,79,-166,-170,-171,-173,-176,-177,79,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,79,79,79,79,79,-138,-139,79,-169,-160,79,79,79,-168,-170,79,79,79,-178,-179,79,-181,79,-170,79,79,-168,-180,79,]),'EQUALTO':([3,7,14,29,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,155,160,163,164,165,167,170,171,178,190,193,213,214,219,220,237,238,246,250,272,273,282,288,349,350,],[82,91,-137,106,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,168,-166,-170,-171,-173,-176,-177,168,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,-158,168,-138,-139,168,-169,-157,-160,168,82,91,-168,91,-170,82,-178,-179,168,-181,82,-168,-180,-159,168,168,]),'NOTEQUALTO':([3,7,14,29,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,155,160,163,164,165,167,170,171,178,190,193,213,214,219,220,237,238,246,250,272,273,282,288,349,350,],[83,92,-137,107,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,169,-166,-170,-171,-173,-176,-177,169,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,-158,169,-138,-139,169,-169,-157,-160,169,83,92,-168,92,-170,83,-178,-179,169,-181,83,-168,-180,-159,169,169,]),'GREATER':([3,14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,160,163,164,165,167,171,178,190,213,219,220,237,238,246,250,272,273,282,299,300,301,349,350,],[84,-137,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,84,-166,-170,-171,-173,-176,-177,84,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,84,-138,-139,84,-169,-160,84,84,-168,-170,84,-178,-179,84,-181,84,-168,-180,320,321,322,84,84,]),'LESS':([3,14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,160,163,164,165,167,171,178,190,204,213,219,220,237,238,246,250,272,273,282,349,350,],[85,-137,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,85,-166,-170,-171,-173,-176,-177,85,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,85,-138,-139,85,-169,-160,85,85,274,-168,-170,85,-178,-179,85,-181,85,-168,-180,85,85,]),'GREATEREQUAL':([3,14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,160,163,164,165,167,171,178,190,213,219,220,237,238,246,250,272,273,282,349,350,],[86,-137,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,86,-166,-170,-171,-173,-176,-177,86,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,86,-138,-139,86,-169,-160,86,86,-168,-170,86,-178,-179,86,-181,86,-168,-180,86,86,]),'LESSEQUAL':([3,14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,96,99,100,101,102,103,104,113,116,117,120,121,122,124,125,126,127,128,152,154,160,163,164,165,167,171,178,190,213,219,220,237,238,246,250,272,273,282,349,350,],[87,-137,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,87,-166,-170,-171,-173,-176,-177,87,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,87,-138,-139,87,-169,-160,87,87,-168,-170,87,-178,-179,87,-181,87,-168,-180,87,87,]),'AND':([3,7,14,29,38,39,40,46,52,53,54,55,56,58,62,63,64,65,99,100,101,102,103,104,109,112,113,116,117,120,121,122,124,125,126,127,128,152,154,155,163,164,167,170,171,177,178,179,190,193,213,214,219,220,237,238,244,246,250,260,272,273,282,288,],[88,88,-137,88,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-166,-170,-171,-173,-176,-177,88,88,88,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,-158,-138,-139,-169,-157,-160,88,88,88,88,88,-168,88,-170,88,-178,-179,88,88,-181,-158,88,-168,-180,-159,]),'OR':([3,7,14,29,38,39,40,46,52,53,54,55,56,58,62,63,64,65,99,100,101,102,103,104,109,112,113,116,117,120,121,122,124,125,126,127,128,152,154,155,163,164,167,170,171,177,178,179,190,193,213,214,219,220,237,238,244,246,250,260,272,273,282,288,],[89,89,-137,89,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-166,-170,-171,-173,-176,-177,89,89,89,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,-158,-138,-139,-169,-157,-160,89,89,89,89,89,-168,89,-170,89,-178,-179,89,89,-181,-158,89,-168,-180,-159,]),'RPAREN':([14,38,39,40,46,52,58,62,63,64,65,84,85,86,87,96,97,98,99,100,101,102,103,104,116,117,120,121,122,124,125,126,127,128,152,154,155,156,159,163,164,165,167,168,169,170,171,172,176,177,178,205,237,238,243,244,245,247,250,257,258,260,282,287,288,289,345,352,353,],[-137,-166,-167,-168,-172,-198,-197,-161,-190,-191,-173,-199,-200,-201,-202,167,170,171,-162,-163,-164,-165,-176,-177,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,-158,-156,-154,-138,-139,167,-169,-203,-204,-157,-160,-155,261,170,167,171,-178,-179,283,-174,-175,284,-181,167,-163,288,-180,288,-159,313,348,355,356,]),'RBRACKET':([14,38,39,40,46,52,58,62,63,64,65,66,67,68,103,104,108,109,110,114,115,116,117,120,121,122,124,125,126,127,128,131,133,135,152,154,155,156,157,158,159,161,162,163,164,167,170,171,172,174,175,212,213,214,215,216,217,218,219,223,226,227,228,229,230,236,237,238,250,261,266,267,268,269,270,271,272,273,282,288,317,318,319,],[-137,-166,-167,-168,-172,-198,-197,-161,-190,-191,-173,-192,-193,-194,-176,-177,-144,-145,-146,-195,-196,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,221,224,231,-135,-136,-158,-156,-150,-153,-154,-148,-151,-138,-139,-169,-157,-160,-155,-149,-152,-120,-121,-122,-123,-124,-125,-126,-170,-119,-127,-128,-170,-171,-173,282,-178,-179,-181,-147,293,295,297,-112,-115,-118,-119,-121,-180,-159,-111,-114,-117,]),'COMMA':([14,38,39,40,46,52,58,62,63,64,65,66,67,68,103,104,108,109,110,114,115,116,117,120,121,122,124,125,126,127,128,152,154,155,156,157,158,159,161,162,163,164,167,170,171,172,174,175,187,188,189,190,191,192,193,194,195,196,197,212,213,214,215,216,217,218,219,223,226,227,228,229,230,237,238,250,261,263,264,266,267,268,269,270,271,272,273,277,278,279,280,281,282,288,293,295,297,314,315,316,317,318,319,323,324,325,327,328,],[-137,-166,-167,-168,-172,-198,-197,-161,-190,-191,-173,-192,-193,-194,-176,-177,-144,-145,-146,-195,-196,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,-135,-136,-158,-156,-150,-153,-154,-148,-151,-138,-139,-169,-157,-160,-155,-149,-152,-107,-108,-109,-99,-100,-101,-102,-103,-104,-105,-106,-120,-121,-122,-123,-124,-125,-126,-170,-119,-127,-128,-170,-171,-173,-178,-179,-181,-147,291,-96,294,296,298,-112,-115,-118,-119,-121,305,306,-30,-34,-32,-180,-159,-110,-113,-116,-95,-97,-98,-111,-114,-117,-29,-32,-33,-31,-35,]),'PRODUCT':([14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,99,100,101,102,103,104,116,117,120,121,122,124,125,126,127,128,152,154,163,164,167,171,213,219,237,238,250,258,273,282,],[93,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-166,-170,-171,-173,-176,-177,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,93,93,93,93,-169,-160,-168,-170,-178,-179,-181,-170,-168,-180,]),'DIVIDE':([14,38,39,40,46,52,53,54,55,56,58,62,63,64,65,99,100,101,102,103,104,116,117,120,121,122,124,125,126,127,128,152,154,163,164,167,171,213,219,237,238,250,258,273,282,],[94,-166,-167,-168,-172,-198,-170,-171,-176,-177,-197,-161,-190,-191,-173,-166,-170,-171,-173,-176,-177,-170,-171,-140,-142,-141,-162,-163,-164,-165,-143,94,94,94,94,-169,-160,-168,-170,-178,-179,-181,-170,-168,-180,]),'TRUE':([30,118,130,138,141,142,143,199,254,292,296,],[114,114,114,114,114,114,114,114,114,114,114,]),'FALSE':([30,118,130,138,141,142,143,199,254,292,296,],[115,115,115,115,115,115,115,115,115,115,115,]),'EQUAL':([31,42,43,44,45,52,53,54,55,56,58,70,71,72,144,200,201,202,203,221,224,231,237,238,248,249,281,282,320,321,322,324,326,],[118,130,132,134,136,-198,138,141,142,143,-197,149,150,151,-82,-73,-70,-76,-79,-59,-55,-63,-178,-179,285,286,307,-180,-56,-60,-64,337,338,]),'TWOPOINTS':([31,58,144,265,],[119,-197,-82,292,]),'LBRACKET':([42,43,44,53,58,100,116,118,125,138,142,149,150,151,200,201,202,219,228,237,258,292,],[131,133,135,139,-197,139,139,199,139,199,199,252,254,256,-73,-70,-76,139,139,139,139,199,]),'POINT':([52,53,58,69,100,116,125,219,228,258,],[-198,140,-197,148,140,140,140,140,140,140,]),'NEW':([118,],[180,]),'NULL':([118,],[181,]),'UNDEFINED':([118,],[182,]),'LKEY':([118,137,138,283,284,332,348,355,356,],[198,233,198,309,309,309,309,309,309,]),'VARBOOLEAN':([119,274,],[200,300,]),'VARNUMBER':([119,274,],[201,299,]),'VARSTRING':([119,274,],[202,301,]),'ARRAY':([119,],[204,]),'SET':([180,],[262,]),'ELIF':([308,334,342,351,],[331,-47,-46,331,]),'ELSE':([308,329,334,342,351,354,],[332,332,-47,-46,-40,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,309,],[1,333,]),'statement_value':([0,309,],[2,2,]),'expression':([0,28,30,80,81,82,83,90,91,92,95,111,118,129,130,132,138,139,141,142,143,145,146,153,166,173,199,252,254,259,275,285,286,292,294,296,309,335,336,340,],[3,96,113,155,156,157,158,160,160,160,165,178,190,210,220,223,190,236,190,190,190,246,246,257,260,160,272,223,220,287,210,223,223,190,223,220,3,246,246,246,]),'concatenate':([0,309,],[4,4,]),'declare':([0,309,],[5,5,]),'assign':([0,309,],[6,6,]),'expCond':([0,28,30,90,91,92,111,118,130,138,141,142,143,145,146,173,199,254,292,296,309,335,336,340,],[7,97,112,159,161,162,177,193,214,193,193,193,193,244,244,97,214,214,193,214,7,244,244,244,]),'expOpLog':([0,30,111,118,130,138,141,142,143,145,146,199,254,292,296,309,335,336,340,],[8,108,176,194,215,194,194,194,194,245,245,215,215,194,215,8,245,245,245,]),'expNeg':([0,118,130,138,141,142,143,199,254,292,296,309,],[9,195,216,195,195,195,195,216,216,195,216,9,]),'expEq':([0,118,130,138,141,142,143,199,254,292,296,309,],[10,196,217,196,196,196,196,217,217,196,217,10,]),'expNotEq':([0,118,130,138,141,142,143,199,254,292,296,309,],[11,197,218,197,197,197,197,218,218,197,218,11,]),'exp_set':([0,309,],[12,12,]),'statement_control':([0,309,],[13,13,]),'term':([0,28,30,78,79,80,81,82,83,90,91,92,93,94,95,111,118,129,130,132,138,139,141,142,143,145,146,153,166,173,199,252,254,259,275,285,286,292,294,296,309,335,336,340,],[14,14,14,152,154,14,14,14,14,14,14,14,163,164,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'termS':([0,129,309,],[15,208,15,]),'var_boolean':([0,309,],[16,16,]),'var_number':([0,309,],[17,17,]),'var_string':([0,309,],[18,18,]),'var_enum':([0,309,],[19,19,]),'var_null':([0,309,],[20,20,]),'var_undefined':([0,309,],[21,21,]),'declare_array':([0,309,],[22,22,]),'declare_enum':([0,309,],[23,23,]),'declare_generic':([0,309,],[24,24,]),'assign_variable':([0,309,],[25,25,]),'assign_array':([0,309,],[26,26,]),'assign_object_value':([0,309,],[27,27,]),'factor_exprlog':([0,30,105,106,107,111,118,130,138,141,142,143,145,146,199,254,292,296,309,335,336,340,],[29,109,172,174,175,179,29,29,29,29,29,29,179,179,29,29,29,29,29,179,179,179,]),'declare_any':([0,147,309,],[31,248,31,]),'funcionif':([0,309,],[32,32,]),'funcionwhile':([0,309,],[33,33,]),'funcionfor':([0,309,],[34,34,]),'term1':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,129,130,132,138,139,141,142,143,145,146,153,166,173,199,252,254,259,275,285,286,292,294,296,309,335,336,340,],[35,35,35,122,128,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'number':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,138,139,141,142,143,145,146,153,166,173,199,252,254,259,275,285,286,292,294,296,307,309,335,336,337,340,],[38,99,38,124,124,38,38,38,38,38,38,38,38,38,38,38,99,99,38,124,38,38,38,38,38,38,38,38,38,38,99,38,38,38,38,38,38,38,38,38,38,38,38,327,38,38,38,327,38,]),'factor_expr':([0,28,30,78,79,80,81,82,83,90,91,92,93,94,95,111,118,129,130,132,138,139,141,142,143,145,146,153,166,173,199,252,254,259,275,285,286,292,294,296,309,335,336,340,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'other_value':([0,28,30,78,79,80,81,82,83,90,91,92,93,94,95,111,118,129,130,132,134,138,139,141,142,143,145,146,153,166,173,199,252,254,256,259,275,285,286,292,294,296,298,309,335,336,340,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,213,40,227,40,40,40,40,40,40,40,40,40,40,273,40,213,227,40,40,40,40,40,40,213,227,40,40,40,40,]),'string':([0,118,129,134,138,141,142,143,199,256,275,292,298,307,309,338,],[41,192,206,226,192,192,192,192,226,226,303,192,226,328,41,328,]),'declare_boolean':([0,309,],[42,42,]),'declare_number':([0,309,],[43,43,]),'declare_string':([0,309,],[44,44,]),'declare_var_enum':([0,309,],[45,45,]),'enum_value':([0,28,30,78,79,80,81,82,83,90,91,92,93,94,95,111,118,129,130,132,134,136,138,139,141,142,143,145,146,153,166,173,199,252,254,256,259,275,285,286,292,294,296,298,309,335,336,340,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,232,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'declare_array_main_number':([0,309,],[47,47,]),'declare_array_main_boolean':([0,309,],[48,48,]),'declare_array_main_string':([0,309,],[49,49,]),'declare_generic_array':([0,309,],[50,50,]),'variable':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,134,138,139,140,141,142,143,145,146,153,166,173,198,199,252,254,256,259,275,285,286,291,292,294,296,298,309,335,336,340,],[53,100,116,125,125,116,116,116,116,116,116,116,116,116,116,116,100,100,116,125,116,219,116,228,116,116,237,116,116,116,116,116,258,116,116,265,219,116,219,228,116,116,116,116,265,116,116,219,228,53,116,116,116,]),'array_value':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,134,138,139,140,141,142,143,145,146,153,166,173,199,252,254,256,259,275,285,286,292,294,296,298,309,335,336,340,],[54,101,117,126,126,117,117,117,117,117,117,117,117,117,117,117,101,101,117,126,117,117,117,229,117,117,238,117,117,117,117,117,101,117,117,117,117,117,229,117,117,117,117,117,117,117,229,54,117,117,117,]),'object_value_form1':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,134,138,139,141,142,143,145,146,153,166,173,199,252,254,256,259,275,285,286,292,294,296,298,309,335,336,340,],[55,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,55,103,103,103,]),'object_value_form2':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,134,138,139,141,142,143,145,146,153,166,173,199,252,254,256,259,275,285,286,292,294,296,298,309,335,336,340,],[56,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,56,104,104,104,]),'prefix':([0,147,309,],[57,57,57,]),'group':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,138,139,141,142,143,145,146,153,166,173,199,252,254,259,275,285,286,292,294,296,309,335,336,340,],[62,98,62,62,62,62,62,62,62,62,62,62,62,62,62,62,98,98,62,205,62,62,62,62,62,62,62,62,62,62,98,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'object_value':([0,28,30,36,37,78,79,80,81,82,83,90,91,92,93,94,95,111,118,123,129,130,132,134,138,139,141,142,143,145,146,153,166,173,199,252,254,256,259,275,285,286,292,294,296,298,309,335,336,340,],[65,102,65,127,127,65,65,65,65,65,65,65,65,65,65,65,102,102,65,127,65,65,65,230,65,65,65,65,65,65,65,102,65,65,65,65,65,230,65,65,65,65,65,65,65,230,65,65,65,65,]),'object_name':([0,28,30,78,79,80,81,82,83,90,91,92,93,94,95,111,118,119,129,130,132,134,136,138,139,141,142,143,145,146,148,153,166,173,199,233,252,254,256,259,275,285,286,292,294,296,298,305,306,309,335,336,340,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,203,69,69,69,69,69,69,69,69,69,69,69,69,250,69,69,69,69,281,69,69,69,69,69,69,69,69,69,69,69,324,326,69,69,69,69,]),'declare_array_number':([0,309,],[70,70,]),'declare_array_boolean':([0,309,],[71,71,]),'declare_array_string':([0,309,],[72,72,]),'operador':([3,96,113,160,165,178,190,220,246,272,349,350,],[80,166,80,80,259,166,80,80,80,80,352,353,]),'oplogico':([3,7,29,109,112,113,177,178,179,190,193,214,220,244,246,272,],[81,90,105,105,90,81,90,81,105,81,90,90,81,90,81,81,]),'boolean':([30,118,130,138,141,142,143,199,254,292,296,],[110,191,212,191,191,191,191,212,212,191,212,]),'assign_value':([118,138,],[183,234,]),'list_types':([118,138,142,292,],[184,235,241,316,]),'general_value':([118,138,141,142,143,292,],[185,185,239,240,242,315,]),'object_definition':([118,138,],[186,186,]),'list_number':([118,138,142,149,292,],[187,187,187,251,187,]),'list_boolean':([118,138,142,150,292,],[188,188,188,253,188,]),'list_string':([118,138,142,151,292,],[189,189,189,255,189,]),'chain':([129,],[207,]),'value':([129,275,],[209,302,]),'boolean_value':([130,199,254,296,],[211,270,270,318,]),'number_value':([132,199,252,285,286,294,],[222,269,269,311,312,317,]),'string_value':([134,199,256,298,],[225,271,271,319,]),'formLog':([145,146,335,336,340,],[243,247,343,344,345,]),'attributes':([198,],[263,]),'attribute':([198,291,],[264,314,]),'numbers':([199,252,],[266,266,]),'booleans':([199,254,],[267,267,]),'strings':([199,256,],[268,268,]),'enums':([233,],[276,]),'enums_numeric':([233,],[277,]),'enums_string':([233,],[278,]),'enums_numeric_value':([233,305,],[279,323,]),'enums_string_value':([233,306,],[280,325,]),'substatement':([283,284,332,348,355,356,],[308,310,341,351,357,358,]),'funcionelif':([308,351,],[329,354,]),'funcionelse':([308,329,],[330,339,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement_value','statement',1,'p_statement','sintacticoNewLang.py',8),
  ('statement -> statement_value POINTCOMMA','statement',2,'p_statement','sintacticoNewLang.py',9),
  ('statement_value -> expression','statement_value',1,'p_statement_value','sintacticoNewLang.py',14),
  ('statement_value -> concatenate','statement_value',1,'p_statement_value','sintacticoNewLang.py',15),
  ('statement_value -> declare','statement_value',1,'p_statement_value','sintacticoNewLang.py',16),
  ('statement_value -> assign','statement_value',1,'p_statement_value','sintacticoNewLang.py',17),
  ('statement_value -> expCond','statement_value',1,'p_statement_value','sintacticoNewLang.py',18),
  ('statement_value -> expOpLog','statement_value',1,'p_statement_value','sintacticoNewLang.py',19),
  ('statement_value -> expNeg','statement_value',1,'p_statement_value','sintacticoNewLang.py',20),
  ('statement_value -> expEq','statement_value',1,'p_statement_value','sintacticoNewLang.py',21),
  ('statement_value -> expNotEq','statement_value',1,'p_statement_value','sintacticoNewLang.py',22),
  ('statement_value -> exp_set','statement_value',1,'p_statement_value','sintacticoNewLang.py',23),
  ('statement_value -> statement_control','statement_value',1,'p_statement_value','sintacticoNewLang.py',24),
  ('statement_control -> funcionif','statement_control',1,'p_statement_control','sintacticoNewLang.py',28),
  ('statement_control -> funcionwhile','statement_control',1,'p_statement_control','sintacticoNewLang.py',29),
  ('statement_control -> funcionfor','statement_control',1,'p_statement_control','sintacticoNewLang.py',30),
  ('declare -> var_boolean','declare',1,'p_declare','sintacticoNewLang.py',34),
  ('declare -> var_number','declare',1,'p_declare','sintacticoNewLang.py',35),
  ('declare -> var_string','declare',1,'p_declare','sintacticoNewLang.py',36),
  ('declare -> var_enum','declare',1,'p_declare','sintacticoNewLang.py',37),
  ('declare -> var_null','declare',1,'p_declare','sintacticoNewLang.py',38),
  ('declare -> var_undefined','declare',1,'p_declare','sintacticoNewLang.py',39),
  ('declare -> declare_array','declare',1,'p_declare','sintacticoNewLang.py',40),
  ('declare -> declare_enum','declare',1,'p_declare','sintacticoNewLang.py',41),
  ('declare -> declare_generic','declare',1,'p_declare','sintacticoNewLang.py',42),
  ('declare_enum -> ENUM OBJECTNAME LKEY enums RKEY','declare_enum',5,'p_declare_enum','sintacticoNewLang.py',48),
  ('enums -> enums_numeric','enums',1,'p_enums','sintacticoNewLang.py',53),
  ('enums -> enums_string','enums',1,'p_enums','sintacticoNewLang.py',54),
  ('enums_numeric -> enums_numeric COMMA enums_numeric_value','enums_numeric',3,'p_enums_numeric','sintacticoNewLang.py',59),
  ('enums_numeric -> enums_numeric_value','enums_numeric',1,'p_enums_numeric','sintacticoNewLang.py',60),
  ('enums_numeric_value -> object_name EQUAL number','enums_numeric_value',3,'p_enums_numeric_value','sintacticoNewLang.py',64),
  ('enums_numeric_value -> object_name','enums_numeric_value',1,'p_enums_numeric_value','sintacticoNewLang.py',65),
  ('enums_string -> enums_string COMMA enums_string_value','enums_string',3,'p_enums_string','sintacticoNewLang.py',70),
  ('enums_string -> enums_string_value','enums_string',1,'p_enums_string','sintacticoNewLang.py',71),
  ('enums_string_value -> object_name EQUAL string','enums_string_value',3,'p_enums_string_value','sintacticoNewLang.py',75),
  ('funcionif -> IF LPAREN formLog RPAREN substatement','funcionif',5,'p_condicionIf','sintacticoNewLang.py',79),
  ('funcionif -> IF LPAREN formLog RPAREN substatement funcionelif','funcionif',6,'p_condicionIf','sintacticoNewLang.py',80),
  ('funcionif -> IF LPAREN formLog RPAREN substatement funcionelif funcionelse','funcionif',7,'p_condicionIf','sintacticoNewLang.py',81),
  ('funcionif -> IF LPAREN formLog RPAREN substatement funcionelse','funcionif',6,'p_condicionIf','sintacticoNewLang.py',82),
  ('funcionelif -> ELIF LPAREN formLog RPAREN substatement','funcionelif',5,'p_condicionElif','sintacticoNewLang.py',88),
  ('funcionelif -> ELIF LPAREN formLog RPAREN substatement funcionelif','funcionelif',6,'p_condicionElif','sintacticoNewLang.py',89),
  ('funcionelse -> ELSE substatement','funcionelse',2,'p_condicionElse','sintacticoNewLang.py',93),
  ('funcionfor -> FOR LPAREN declare_any EQUAL number_value POINTCOMMA formLog POINTCOMMA VARIABLE operador RPAREN substatement','funcionfor',12,'p_condicionFor','sintacticoNewLang.py',97),
  ('funcionfor -> FOR LPAREN VARIABLE EQUAL number_value POINTCOMMA formLog POINTCOMMA VARIABLE operador RPAREN substatement','funcionfor',12,'p_condicionFor','sintacticoNewLang.py',98),
  ('funcionwhile -> WHILE LPAREN formLog RPAREN substatement','funcionwhile',5,'p_condicionWhile','sintacticoNewLang.py',105),
  ('substatement -> LKEY statement RKEY','substatement',3,'p_subStatement','sintacticoNewLang.py',108),
  ('substatement -> LKEY RKEY','substatement',2,'p_subStatement','sintacticoNewLang.py',109),
  ('exp_set -> declare_any EQUAL NEW SET LPAREN RPAREN','exp_set',6,'p_declare_Set','sintacticoNewLang.py',113),
  ('declare_array -> declare_array_main_number','declare_array',1,'p_declare_array','sintacticoNewLang.py',119),
  ('declare_array -> declare_array_main_boolean','declare_array',1,'p_declare_array','sintacticoNewLang.py',120),
  ('declare_array -> declare_array_main_string','declare_array',1,'p_declare_array','sintacticoNewLang.py',121),
  ('declare_array -> declare_generic_array','declare_array',1,'p_declare_array','sintacticoNewLang.py',122),
  ('declare_array_main_number -> declare_array_number EQUAL list_number','declare_array_main_number',3,'p_declare_array_main_number','sintacticoNewLang.py',127),
  ('declare_array_main_number -> declare_array_number','declare_array_main_number',1,'p_declare_array_main_number','sintacticoNewLang.py',128),
  ('declare_array_number -> declare_number LBRACKET RBRACKET','declare_array_number',3,'p_declare_array_number','sintacticoNewLang.py',132),
  ('declare_array_number -> declare_any TWOPOINTS ARRAY LESS VARNUMBER GREATER','declare_array_number',6,'p_declare_array_number','sintacticoNewLang.py',133),
  ('declare_array_main_boolean -> declare_array_boolean EQUAL list_boolean','declare_array_main_boolean',3,'p_declare_array_main_boolean','sintacticoNewLang.py',138),
  ('declare_array_main_boolean -> declare_array_boolean','declare_array_main_boolean',1,'p_declare_array_main_boolean','sintacticoNewLang.py',139),
  ('declare_array_boolean -> declare_boolean LBRACKET RBRACKET','declare_array_boolean',3,'p_declare_array_boolean','sintacticoNewLang.py',143),
  ('declare_array_boolean -> declare_any TWOPOINTS ARRAY LESS VARBOOLEAN GREATER','declare_array_boolean',6,'p_declare_array_boolean','sintacticoNewLang.py',144),
  ('declare_array_main_string -> declare_array_string EQUAL list_string','declare_array_main_string',3,'p_declare_array_main_string','sintacticoNewLang.py',149),
  ('declare_array_main_string -> declare_array_string','declare_array_main_string',1,'p_declare_array_main_string','sintacticoNewLang.py',150),
  ('declare_array_string -> declare_string LBRACKET RBRACKET','declare_array_string',3,'p_declare_array_string','sintacticoNewLang.py',153),
  ('declare_array_string -> declare_any TWOPOINTS ARRAY LESS VARSTRING GREATER','declare_array_string',6,'p_declare_array_string','sintacticoNewLang.py',154),
  ('declare_generic_array -> declare_any EQUAL list_types','declare_generic_array',3,'p_declare_generic_array','sintacticoNewLang.py',159),
  ('var_null -> declare_any EQUAL NULL','var_null',3,'p_declare_null','sintacticoNewLang.py',164),
  ('var_undefined -> declare_any EQUAL UNDEFINED','var_undefined',3,'p_declare_undefined','sintacticoNewLang.py',168),
  ('var_number -> declare_number EQUAL number_value','var_number',3,'p_var_number','sintacticoNewLang.py',173),
  ('var_number -> declare_number','var_number',1,'p_var_number','sintacticoNewLang.py',174),
  ('declare_number -> declare_any TWOPOINTS VARNUMBER','declare_number',3,'p_declare_number','sintacticoNewLang.py',179),
  ('var_boolean -> declare_boolean EQUAL boolean_value','var_boolean',3,'p_var_boolean','sintacticoNewLang.py',184),
  ('var_boolean -> declare_boolean','var_boolean',1,'p_var_boolean','sintacticoNewLang.py',185),
  ('declare_boolean -> declare_any TWOPOINTS VARBOOLEAN','declare_boolean',3,'p_declare_boolean','sintacticoNewLang.py',190),
  ('var_string -> declare_string EQUAL string_value','var_string',3,'p_var_string','sintacticoNewLang.py',195),
  ('var_string -> declare_string','var_string',1,'p_var_string','sintacticoNewLang.py',196),
  ('declare_string -> declare_any TWOPOINTS VARSTRING','declare_string',3,'p_declare_string','sintacticoNewLang.py',201),
  ('var_enum -> declare_var_enum EQUAL enum_value','var_enum',3,'p_var_enum','sintacticoNewLang.py',206),
  ('var_enum -> declare_var_enum','var_enum',1,'p_var_enum','sintacticoNewLang.py',207),
  ('declare_var_enum -> declare_any TWOPOINTS object_name','declare_var_enum',3,'p_declare_var_enum','sintacticoNewLang.py',212),
  ('declare_generic -> declare_any EQUAL assign_value','declare_generic',3,'p_declare_generic','sintacticoNewLang.py',217),
  ('declare_generic -> declare_any','declare_generic',1,'p_declare_generic','sintacticoNewLang.py',218),
  ('declare_any -> prefix VARIABLE','declare_any',2,'p_declare_any','sintacticoNewLang.py',224),
  ('assign -> assign_variable','assign',1,'p_assign','sintacticoNewLang.py',229),
  ('assign -> assign_array','assign',1,'p_assign','sintacticoNewLang.py',230),
  ('assign -> assign_object_value','assign',1,'p_assign','sintacticoNewLang.py',231),
  ('assign_variable -> variable EQUAL assign_value','assign_variable',3,'p_assign_variable','sintacticoNewLang.py',236),
  ('assign_variable -> variable EQUAL list_types','assign_variable',3,'p_assign_variable','sintacticoNewLang.py',237),
  ('assign_array -> array_value EQUAL general_value','assign_array',3,'p_assign_array','sintacticoNewLang.py',242),
  ('assign_object_value -> object_value_form1 EQUAL general_value','assign_object_value',3,'p_assign_object_value','sintacticoNewLang.py',247),
  ('assign_object_value -> object_value_form1 EQUAL list_types','assign_object_value',3,'p_assign_object_value','sintacticoNewLang.py',248),
  ('assign_object_value -> object_value_form2 EQUAL general_value','assign_object_value',3,'p_assign_object_value','sintacticoNewLang.py',249),
  ('assign_value -> general_value','assign_value',1,'p_assign_value','sintacticoNewLang.py',254),
  ('assign_value -> object_definition','assign_value',1,'p_assign_value','sintacticoNewLang.py',255),
  ('object_definition -> LKEY attributes RKEY','object_definition',3,'p_object_definition','sintacticoNewLang.py',260),
  ('attributes -> attributes COMMA attribute','attributes',3,'p_attributes_line','sintacticoNewLang.py',264),
  ('attributes -> attribute','attributes',1,'p_attributes_line','sintacticoNewLang.py',265),
  ('attribute -> variable TWOPOINTS general_value','attribute',3,'p_attribute','sintacticoNewLang.py',269),
  ('attribute -> variable TWOPOINTS list_types','attribute',3,'p_attribute','sintacticoNewLang.py',270),
  ('general_value -> expression','general_value',1,'p_general_value','sintacticoNewLang.py',275),
  ('general_value -> boolean','general_value',1,'p_general_value','sintacticoNewLang.py',276),
  ('general_value -> string','general_value',1,'p_general_value','sintacticoNewLang.py',277),
  ('general_value -> expCond','general_value',1,'p_general_value','sintacticoNewLang.py',278),
  ('general_value -> expOpLog','general_value',1,'p_general_value','sintacticoNewLang.py',279),
  ('general_value -> expNeg','general_value',1,'p_general_value','sintacticoNewLang.py',280),
  ('general_value -> expEq','general_value',1,'p_general_value','sintacticoNewLang.py',281),
  ('general_value -> expNotEq','general_value',1,'p_general_value','sintacticoNewLang.py',282),
  ('list_types -> list_number','list_types',1,'p_list_types','sintacticoNewLang.py',287),
  ('list_types -> list_boolean','list_types',1,'p_list_types','sintacticoNewLang.py',288),
  ('list_types -> list_string','list_types',1,'p_list_types','sintacticoNewLang.py',289),
  ('list_number -> LBRACKET numbers RBRACKET','list_number',3,'p_list_number','sintacticoNewLang.py',294),
  ('numbers -> numbers COMMA number_value','numbers',3,'p_numbers','sintacticoNewLang.py',298),
  ('numbers -> number_value','numbers',1,'p_numbers','sintacticoNewLang.py',299),
  ('list_boolean -> LBRACKET booleans RBRACKET','list_boolean',3,'p_list_boolean','sintacticoNewLang.py',304),
  ('booleans -> booleans COMMA boolean_value','booleans',3,'p_booleans','sintacticoNewLang.py',308),
  ('booleans -> boolean_value','booleans',1,'p_booleans','sintacticoNewLang.py',309),
  ('list_string -> LBRACKET strings RBRACKET','list_string',3,'p_list_string','sintacticoNewLang.py',314),
  ('strings -> strings COMMA string_value','strings',3,'p_stringss','sintacticoNewLang.py',318),
  ('strings -> string_value','strings',1,'p_stringss','sintacticoNewLang.py',319),
  ('number_value -> expression','number_value',1,'p_number_value','sintacticoNewLang.py',324),
  ('boolean_value -> boolean','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',328),
  ('boolean_value -> other_value','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',329),
  ('boolean_value -> expCond','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',330),
  ('boolean_value -> expOpLog','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',331),
  ('boolean_value -> expNeg','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',332),
  ('boolean_value -> expEq','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',333),
  ('boolean_value -> expNotEq','boolean_value',1,'p_declare_boolean_value','sintacticoNewLang.py',334),
  ('string_value -> string','string_value',1,'p_string_value','sintacticoNewLang.py',338),
  ('string_value -> other_value','string_value',1,'p_string_value','sintacticoNewLang.py',339),
  ('concatenate -> termS','concatenate',1,'p_concatenate','sintacticoNewLang.py',344),
  ('termS -> string PLUS chain','termS',3,'p_concatenate_term','sintacticoNewLang.py',349),
  ('chain -> termS PLUS value','chain',3,'p_chain','sintacticoNewLang.py',354),
  ('chain -> value','chain',1,'p_chain','sintacticoNewLang.py',355),
  ('value -> expression','value',1,'p_value','sintacticoNewLang.py',359),
  ('value -> string','value',1,'p_value','sintacticoNewLang.py',360),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintacticoNewLang.py',365),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintacticoNewLang.py',368),
  ('expression -> term','expression',1,'p_expression_term','sintacticoNewLang.py',371),
  ('term -> term PRODUCT term','term',3,'p_term_product','sintacticoNewLang.py',376),
  ('term -> term DIVIDE term','term',3,'p_term_div','sintacticoNewLang.py',381),
  ('term -> term1 INCREMENT','term',2,'p_expression_increment','sintacticoNewLang.py',387),
  ('term -> INCREMENT term1','term',2,'p_expression_increment','sintacticoNewLang.py',388),
  ('term -> term1 DECREMENT','term',2,'p_expression_decrement','sintacticoNewLang.py',393),
  ('term -> DECREMENT term1','term',2,'p_expression_decrement','sintacticoNewLang.py',394),
  ('expNeg -> NEGATION expOpLog','expNeg',2,'p_negation','sintacticoNewLang.py',399),
  ('expNeg -> NEGATION factor_exprlog','expNeg',2,'p_negation','sintacticoNewLang.py',400),
  ('expNeg -> NEGATION boolean','expNeg',2,'p_negation','sintacticoNewLang.py',401),
  ('expNeg -> NEGATION LPAREN expOpLog RPAREN','expNeg',4,'p_negation','sintacticoNewLang.py',402),
  ('expEq -> expCond EQUALTO expCond','expEq',3,'p_equalto','sintacticoNewLang.py',406),
  ('expEq -> factor_exprlog EQUALTO factor_exprlog','expEq',3,'p_equalto','sintacticoNewLang.py',407),
  ('expEq -> expression EQUALTO expression','expEq',3,'p_equalto','sintacticoNewLang.py',408),
  ('expNotEq -> expCond NOTEQUALTO expCond','expNotEq',3,'p_notequal','sintacticoNewLang.py',412),
  ('expNotEq -> factor_exprlog NOTEQUALTO factor_exprlog','expNotEq',3,'p_notequal','sintacticoNewLang.py',413),
  ('expNotEq -> expression NOTEQUALTO expression','expNotEq',3,'p_notequal','sintacticoNewLang.py',414),
  ('expOpLog -> expCond oplogico expCond','expOpLog',3,'p_expression_opLogico','sintacticoNewLang.py',420),
  ('expOpLog -> factor_exprlog oplogico factor_exprlog','expOpLog',3,'p_expression_opLogico','sintacticoNewLang.py',421),
  ('expOpLog -> expression oplogico expression','expOpLog',3,'p_expression_opLogico','sintacticoNewLang.py',422),
  ('factor_exprlog -> LPAREN expCond RPAREN','factor_exprlog',3,'p_exp_logica','sintacticoNewLang.py',427),
  ('expCond -> expression operador expression','expCond',3,'p_expression_condicional','sintacticoNewLang.py',432),
  ('expCond -> LPAREN expression operador expression RPAREN','expCond',5,'p_expression_condicional','sintacticoNewLang.py',433),
  ('term1 -> LPAREN group RPAREN','term1',3,'p_term1_expr','sintacticoNewLang.py',438),
  ('term1 -> group','term1',1,'p_term1_expr','sintacticoNewLang.py',439),
  ('group -> number','group',1,'p_group_expr','sintacticoNewLang.py',444),
  ('group -> variable','group',1,'p_group_expr','sintacticoNewLang.py',445),
  ('group -> array_value','group',1,'p_group_expr','sintacticoNewLang.py',446),
  ('group -> object_value','group',1,'p_group_expr','sintacticoNewLang.py',447),
  ('term -> number','term',1,'p_term_factor','sintacticoNewLang.py',452),
  ('term -> factor_expr','term',1,'p_term_factor','sintacticoNewLang.py',453),
  ('term -> other_value','term',1,'p_term_factor','sintacticoNewLang.py',454),
  ('factor_expr -> LPAREN expression RPAREN','factor_expr',3,'p_factor_expr','sintacticoNewLang.py',458),
  ('other_value -> variable','other_value',1,'p_other_value','sintacticoNewLang.py',463),
  ('other_value -> array_value','other_value',1,'p_other_value','sintacticoNewLang.py',464),
  ('other_value -> enum_value','other_value',1,'p_other_value','sintacticoNewLang.py',465),
  ('other_value -> object_value','other_value',1,'p_other_value','sintacticoNewLang.py',466),
  ('formLog -> expCond','formLog',1,'p_funcionLog','sintacticoNewLang.py',470),
  ('formLog -> expOpLog','formLog',1,'p_funcionLog','sintacticoNewLang.py',471),
  ('object_value -> object_value_form1','object_value',1,'p_object_value','sintacticoNewLang.py',475),
  ('object_value -> object_value_form2','object_value',1,'p_object_value','sintacticoNewLang.py',476),
  ('object_value_form1 -> variable POINT variable','object_value_form1',3,'p_object_value_form1','sintacticoNewLang.py',481),
  ('object_value_form2 -> variable POINT array_value','object_value_form2',3,'p_object_value_form2','sintacticoNewLang.py',485),
  ('array_value -> variable LBRACKET expression RBRACKET','array_value',4,'p_array_value','sintacticoNewLang.py',490),
  ('enum_value -> object_name POINT object_name','enum_value',3,'p_enum_value','sintacticoNewLang.py',496),
  ('prefix -> LET','prefix',1,'p_prefix','sintacticoNewLang.py',502),
  ('prefix -> VAR','prefix',1,'p_prefix','sintacticoNewLang.py',503),
  ('prefix -> STATIC','prefix',1,'p_prefix','sintacticoNewLang.py',504),
  ('prefix -> CONST','prefix',1,'p_prefix','sintacticoNewLang.py',505),
  ('typedate -> VARNUMBER','typedate',1,'p_typedate','sintacticoNewLang.py',508),
  ('typedate -> VARSTRING','typedate',1,'p_typedate','sintacticoNewLang.py',509),
  ('typedate -> VARBOOLEAN','typedate',1,'p_typedate','sintacticoNewLang.py',510),
  ('typedate -> ENUM','typedate',1,'p_typedate','sintacticoNewLang.py',511),
  ('number -> NUMBER','number',1,'p_number','sintacticoNewLang.py',514),
  ('number -> FLOAT','number',1,'p_number','sintacticoNewLang.py',515),
  ('string -> NORMSTRING1','string',1,'p_string','sintacticoNewLang.py',520),
  ('string -> NORMSTRING2','string',1,'p_string','sintacticoNewLang.py',521),
  ('string -> MULTISTRING','string',1,'p_string','sintacticoNewLang.py',522),
  ('boolean -> TRUE','boolean',1,'p_boolean_value','sintacticoNewLang.py',526),
  ('boolean -> FALSE','boolean',1,'p_boolean_value','sintacticoNewLang.py',527),
  ('variable -> VARIABLE','variable',1,'p_variable','sintacticoNewLang.py',531),
  ('object_name -> OBJECTNAME','object_name',1,'p_object_name','sintacticoNewLang.py',536),
  ('operador -> GREATER','operador',1,'p_operador','sintacticoNewLang.py',540),
  ('operador -> LESS','operador',1,'p_operador','sintacticoNewLang.py',541),
  ('operador -> GREATEREQUAL','operador',1,'p_operador','sintacticoNewLang.py',542),
  ('operador -> LESSEQUAL','operador',1,'p_operador','sintacticoNewLang.py',543),
  ('operador -> EQUALTO','operador',1,'p_operador','sintacticoNewLang.py',544),
  ('operador -> NOTEQUALTO','operador',1,'p_operador','sintacticoNewLang.py',545),
  ('oplogico -> AND','oplogico',1,'p_operadorlogico','sintacticoNewLang.py',549),
  ('oplogico -> OR','oplogico',1,'p_operadorlogico','sintacticoNewLang.py',550),
]
