Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABS
    AND
    ANY
    ARRAY
    COMMA
    COMMENT
    DOLLAR
    ELIF
    ELSE
    ENUM
    EQUALTO
    FOR
    FUNCTIONADD
    FUNCTIONCHARAT
    FUNCTIONCONCAT
    FUNCTIONFILTER
    FUNCTIONHAS
    FUNCTIONJOIN
    FUNCTIONSPLIT
    FUNMATH
    GREATER
    IF
    IN
    INSTANCEOF
    LBRACKET
    LCOMILLA
    LESS
    LKEY
    MOD
    MULTICOMMENT
    MULTISTRING
    NEGATION
    NEW
    NORMSTRING2
    NOTEQUALTO
    NULL
    OBJECTNAME
    OR
    POINT
    POW
    PRINT
    RBRACKET
    RCOMILLA
    RKEY
    ROUND
    SET
    SPECIAL
    TYPEOF
    UNDEFINED
    VAROBJECT
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> statement_value
Rule 2     statement -> statement_value POINTCOMMA
Rule 3     statement_value -> expression
Rule 4     statement_value -> concatenate
Rule 5     statement_value -> declare
Rule 6     statement_value -> assign
Rule 7     declare -> var_boolean
Rule 8     declare -> var_number
Rule 9     declare -> var_string
Rule 10    declare -> declare_generic
Rule 11    var_number -> declare_number EQUAL number_value
Rule 12    declare_number -> declare_any TWOPOINTS VARNUMBER
Rule 13    number_value -> expression
Rule 14    var_boolean -> declare_boolean EQUAL boolean_value
Rule 15    declare_boolean -> declare_any TWOPOINTS VARBOOLEAN
Rule 16    boolean_value -> boolean
Rule 17    boolean_value -> variable
Rule 18    var_string -> declare_string EQUAL string_value
Rule 19    declare_string -> declare_any TWOPOINTS VARSTRING
Rule 20    string_value -> string
Rule 21    string_value -> variable
Rule 22    declare_generic -> declare_any EQUAL assign_value
Rule 23    declare_any -> prefix VARIABLE
Rule 24    assign -> VARIABLE EQUAL assign_value
Rule 25    assign_value -> expression
Rule 26    assign_value -> boolean
Rule 27    assign_value -> string
Rule 28    concatenate -> termS
Rule 29    termS -> string PLUS chain
Rule 30    chain -> termS PLUS value
Rule 31    chain -> value
Rule 32    value -> expression
Rule 33    value -> string
Rule 34    expression -> expression PLUS term
Rule 35    expression -> expression MINUS term
Rule 36    expression -> term
Rule 37    term -> term PRODUCT term
Rule 38    term -> term DIVIDE term
Rule 39    term -> term1 INCREMENT
Rule 40    term -> INCREMENT term1
Rule 41    term -> term1 DECREMENT
Rule 42    term -> DECREMENT term1
Rule 43    term1 -> number
Rule 44    term1 -> variable
Rule 45    term1 -> group
Rule 46    group -> LPAREN variable RPAREN
Rule 47    group -> LPAREN number RPAREN
Rule 48    term -> number
Rule 49    term -> factor_expr
Rule 50    term -> variable
Rule 51    factor_expr -> LPAREN expression RPAREN
Rule 52    prefix -> LET
Rule 53    prefix -> VAR
Rule 54    prefix -> STATIC
Rule 55    prefix -> CONST
Rule 56    number -> NUMBER
Rule 57    number -> FLOAT
Rule 58    string -> NORMSTRING1
Rule 59    boolean -> TRUE
Rule 60    boolean -> FALSE
Rule 61    variable -> VARIABLE

Terminals, with rules where they appear

ABS                  : 
AND                  : 
ANY                  : 
ARRAY                : 
COMMA                : 
COMMENT              : 
CONST                : 55
DECREMENT            : 41 42
DIVIDE               : 38
DOLLAR               : 
ELIF                 : 
ELSE                 : 
ENUM                 : 
EQUAL                : 11 14 18 22 24
EQUALTO              : 
FALSE                : 60
FLOAT                : 57
FOR                  : 
FUNCTIONADD          : 
FUNCTIONCHARAT       : 
FUNCTIONCONCAT       : 
FUNCTIONFILTER       : 
FUNCTIONHAS          : 
FUNCTIONJOIN         : 
FUNCTIONSPLIT        : 
FUNMATH              : 
GREATER              : 
IF                   : 
IN                   : 
INCREMENT            : 39 40
INSTANCEOF           : 
LBRACKET             : 
LCOMILLA             : 
LESS                 : 
LET                  : 52
LKEY                 : 
LPAREN               : 46 47 51
MINUS                : 35
MOD                  : 
MULTICOMMENT         : 
MULTISTRING          : 
NEGATION             : 
NEW                  : 
NORMSTRING1          : 58
NORMSTRING2          : 
NOTEQUALTO           : 
NULL                 : 
NUMBER               : 56
OBJECTNAME           : 
OR                   : 
PLUS                 : 29 30 34
POINT                : 
POINTCOMMA           : 2
POW                  : 
PRINT                : 
PRODUCT              : 37
RBRACKET             : 
RCOMILLA             : 
RKEY                 : 
ROUND                : 
RPAREN               : 46 47 51
SET                  : 
SPECIAL              : 
STATIC               : 54
TRUE                 : 59
TWOPOINTS            : 12 15 19
TYPEOF               : 
UNDEFINED            : 
VAR                  : 53
VARBOOLEAN           : 15
VARIABLE             : 23 24 61
VARNUMBER            : 12
VAROBJECT            : 
VARSTRING            : 19
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assign               : 6
assign_value         : 22 24
boolean              : 16 26
boolean_value        : 14
chain                : 29
concatenate          : 4
declare              : 5
declare_any          : 12 15 19 22
declare_boolean      : 14
declare_generic      : 10
declare_number       : 11
declare_string       : 18
expression           : 3 13 25 32 34 35 51
factor_expr          : 49
group                : 45
number               : 43 47 48
number_value         : 11
prefix               : 23
statement            : 0
statement_value      : 1 2
string               : 20 27 29 33
string_value         : 18
term                 : 34 35 36 37 37 38 38
term1                : 39 40 41 42
termS                : 28 30
value                : 30 31
var_boolean          : 7
var_number           : 8
var_string           : 9
variable             : 17 21 44 46 50

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . statement_value
    (2) statement -> . statement_value POINTCOMMA
    (3) statement_value -> . expression
    (4) statement_value -> . concatenate
    (5) statement_value -> . declare
    (6) statement_value -> . assign
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (28) concatenate -> . termS
    (7) declare -> . var_boolean
    (8) declare -> . var_number
    (9) declare -> . var_string
    (10) declare -> . declare_generic
    (24) assign -> . VARIABLE EQUAL assign_value
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (29) termS -> . string PLUS chain
    (14) var_boolean -> . declare_boolean EQUAL boolean_value
    (11) var_number -> . declare_number EQUAL number_value
    (18) var_string -> . declare_string EQUAL string_value
    (22) declare_generic -> . declare_any EQUAL assign_value
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (58) string -> . NORMSTRING1
    (15) declare_boolean -> . declare_any TWOPOINTS VARBOOLEAN
    (12) declare_number -> . declare_any TWOPOINTS VARNUMBER
    (19) declare_string -> . declare_any TWOPOINTS VARSTRING
    (23) declare_any -> . prefix VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN
    (52) prefix -> . LET
    (53) prefix -> . VAR
    (54) prefix -> . STATIC
    (55) prefix -> . CONST

    VARIABLE        shift and go to state 13
    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    NORMSTRING1     shift and go to state 29
    LET             shift and go to state 31
    VAR             shift and go to state 32
    STATIC          shift and go to state 33
    CONST           shift and go to state 34

    statement                      shift and go to state 1
    statement_value                shift and go to state 2
    expression                     shift and go to state 3
    concatenate                    shift and go to state 4
    declare                        shift and go to state 5
    assign                         shift and go to state 6
    term                           shift and go to state 7
    termS                          shift and go to state 8
    var_boolean                    shift and go to state 9
    var_number                     shift and go to state 10
    var_string                     shift and go to state 11
    declare_generic                shift and go to state 12
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    string                         shift and go to state 20
    declare_boolean                shift and go to state 21
    declare_number                 shift and go to state 22
    declare_string                 shift and go to state 23
    declare_any                    shift and go to state 24
    group                          shift and go to state 25
    prefix                         shift and go to state 30

state 1

    (0) S' -> statement .



state 2

    (1) statement -> statement_value .
    (2) statement -> statement_value . POINTCOMMA

    $end            reduce using rule 1 (statement -> statement_value .)
    POINTCOMMA      shift and go to state 35


state 3

    (3) statement_value -> expression .
    (34) expression -> expression . PLUS term
    (35) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 3 (statement_value -> expression .)
    $end            reduce using rule 3 (statement_value -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37


state 4

    (4) statement_value -> concatenate .

    POINTCOMMA      reduce using rule 4 (statement_value -> concatenate .)
    $end            reduce using rule 4 (statement_value -> concatenate .)


state 5

    (5) statement_value -> declare .

    POINTCOMMA      reduce using rule 5 (statement_value -> declare .)
    $end            reduce using rule 5 (statement_value -> declare .)


state 6

    (6) statement_value -> assign .

    POINTCOMMA      reduce using rule 6 (statement_value -> assign .)
    $end            reduce using rule 6 (statement_value -> assign .)


state 7

    (36) expression -> term .
    (37) term -> term . PRODUCT term
    (38) term -> term . DIVIDE term

    PLUS            reduce using rule 36 (expression -> term .)
    MINUS           reduce using rule 36 (expression -> term .)
    POINTCOMMA      reduce using rule 36 (expression -> term .)
    $end            reduce using rule 36 (expression -> term .)
    RPAREN          reduce using rule 36 (expression -> term .)
    PRODUCT         shift and go to state 38
    DIVIDE          shift and go to state 39


state 8

    (28) concatenate -> termS .

    POINTCOMMA      reduce using rule 28 (concatenate -> termS .)
    $end            reduce using rule 28 (concatenate -> termS .)


state 9

    (7) declare -> var_boolean .

    POINTCOMMA      reduce using rule 7 (declare -> var_boolean .)
    $end            reduce using rule 7 (declare -> var_boolean .)


state 10

    (8) declare -> var_number .

    POINTCOMMA      reduce using rule 8 (declare -> var_number .)
    $end            reduce using rule 8 (declare -> var_number .)


state 11

    (9) declare -> var_string .

    POINTCOMMA      reduce using rule 9 (declare -> var_string .)
    $end            reduce using rule 9 (declare -> var_string .)


state 12

    (10) declare -> declare_generic .

    POINTCOMMA      reduce using rule 10 (declare -> declare_generic .)
    $end            reduce using rule 10 (declare -> declare_generic .)


state 13

    (24) assign -> VARIABLE . EQUAL assign_value
    (61) variable -> VARIABLE .

    EQUAL           shift and go to state 40
    PRODUCT         reduce using rule 61 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 61 (variable -> VARIABLE .)
    PLUS            reduce using rule 61 (variable -> VARIABLE .)
    MINUS           reduce using rule 61 (variable -> VARIABLE .)
    POINTCOMMA      reduce using rule 61 (variable -> VARIABLE .)
    $end            reduce using rule 61 (variable -> VARIABLE .)
    INCREMENT       reduce using rule 61 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 61 (variable -> VARIABLE .)


state 14

    (39) term -> term1 . INCREMENT
    (41) term -> term1 . DECREMENT

    INCREMENT       shift and go to state 41
    DECREMENT       shift and go to state 42


state 15

    (40) term -> INCREMENT . term1
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 47

    term1                          shift and go to state 43
    number                         shift and go to state 44
    variable                       shift and go to state 45
    group                          shift and go to state 25

state 16

    (42) term -> DECREMENT . term1
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 47

    term1                          shift and go to state 48
    number                         shift and go to state 44
    variable                       shift and go to state 45
    group                          shift and go to state 25

state 17

    (48) term -> number .
    (43) term1 -> number .

    PRODUCT         reduce using rule 48 (term -> number .)
    DIVIDE          reduce using rule 48 (term -> number .)
    PLUS            reduce using rule 48 (term -> number .)
    MINUS           reduce using rule 48 (term -> number .)
    POINTCOMMA      reduce using rule 48 (term -> number .)
    $end            reduce using rule 48 (term -> number .)
    RPAREN          reduce using rule 48 (term -> number .)
    INCREMENT       reduce using rule 43 (term1 -> number .)
    DECREMENT       reduce using rule 43 (term1 -> number .)


state 18

    (49) term -> factor_expr .

    PRODUCT         reduce using rule 49 (term -> factor_expr .)
    DIVIDE          reduce using rule 49 (term -> factor_expr .)
    PLUS            reduce using rule 49 (term -> factor_expr .)
    MINUS           reduce using rule 49 (term -> factor_expr .)
    POINTCOMMA      reduce using rule 49 (term -> factor_expr .)
    $end            reduce using rule 49 (term -> factor_expr .)
    RPAREN          reduce using rule 49 (term -> factor_expr .)


state 19

    (50) term -> variable .
    (44) term1 -> variable .

    PRODUCT         reduce using rule 50 (term -> variable .)
    DIVIDE          reduce using rule 50 (term -> variable .)
    PLUS            reduce using rule 50 (term -> variable .)
    MINUS           reduce using rule 50 (term -> variable .)
    POINTCOMMA      reduce using rule 50 (term -> variable .)
    $end            reduce using rule 50 (term -> variable .)
    RPAREN          reduce using rule 50 (term -> variable .)
    INCREMENT       reduce using rule 44 (term1 -> variable .)
    DECREMENT       reduce using rule 44 (term1 -> variable .)


state 20

    (29) termS -> string . PLUS chain

    PLUS            shift and go to state 49


state 21

    (14) var_boolean -> declare_boolean . EQUAL boolean_value

    EQUAL           shift and go to state 50


state 22

    (11) var_number -> declare_number . EQUAL number_value

    EQUAL           shift and go to state 51


state 23

    (18) var_string -> declare_string . EQUAL string_value

    EQUAL           shift and go to state 52


state 24

    (22) declare_generic -> declare_any . EQUAL assign_value
    (15) declare_boolean -> declare_any . TWOPOINTS VARBOOLEAN
    (12) declare_number -> declare_any . TWOPOINTS VARNUMBER
    (19) declare_string -> declare_any . TWOPOINTS VARSTRING

    EQUAL           shift and go to state 53
    TWOPOINTS       shift and go to state 54


state 25

    (45) term1 -> group .

    INCREMENT       reduce using rule 45 (term1 -> group .)
    DECREMENT       reduce using rule 45 (term1 -> group .)
    PRODUCT         reduce using rule 45 (term1 -> group .)
    DIVIDE          reduce using rule 45 (term1 -> group .)
    PLUS            reduce using rule 45 (term1 -> group .)
    MINUS           reduce using rule 45 (term1 -> group .)
    POINTCOMMA      reduce using rule 45 (term1 -> group .)
    $end            reduce using rule 45 (term1 -> group .)
    RPAREN          reduce using rule 45 (term1 -> group .)


state 26

    (56) number -> NUMBER .

    PRODUCT         reduce using rule 56 (number -> NUMBER .)
    DIVIDE          reduce using rule 56 (number -> NUMBER .)
    PLUS            reduce using rule 56 (number -> NUMBER .)
    MINUS           reduce using rule 56 (number -> NUMBER .)
    POINTCOMMA      reduce using rule 56 (number -> NUMBER .)
    $end            reduce using rule 56 (number -> NUMBER .)
    INCREMENT       reduce using rule 56 (number -> NUMBER .)
    DECREMENT       reduce using rule 56 (number -> NUMBER .)
    RPAREN          reduce using rule 56 (number -> NUMBER .)


state 27

    (57) number -> FLOAT .

    PRODUCT         reduce using rule 57 (number -> FLOAT .)
    DIVIDE          reduce using rule 57 (number -> FLOAT .)
    PLUS            reduce using rule 57 (number -> FLOAT .)
    MINUS           reduce using rule 57 (number -> FLOAT .)
    POINTCOMMA      reduce using rule 57 (number -> FLOAT .)
    $end            reduce using rule 57 (number -> FLOAT .)
    INCREMENT       reduce using rule 57 (number -> FLOAT .)
    DECREMENT       reduce using rule 57 (number -> FLOAT .)
    RPAREN          reduce using rule 57 (number -> FLOAT .)


state 28

    (51) factor_expr -> LPAREN . expression RPAREN
    (46) group -> LPAREN . variable RPAREN
    (47) group -> LPAREN . number RPAREN
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (61) variable -> . VARIABLE
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (51) factor_expr -> . LPAREN expression RPAREN
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    VARIABLE        shift and go to state 46
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 28

    expression                     shift and go to state 55
    variable                       shift and go to state 56
    number                         shift and go to state 57
    term                           shift and go to state 7
    term1                          shift and go to state 14
    factor_expr                    shift and go to state 18
    group                          shift and go to state 25

state 29

    (58) string -> NORMSTRING1 .

    PLUS            reduce using rule 58 (string -> NORMSTRING1 .)
    POINTCOMMA      reduce using rule 58 (string -> NORMSTRING1 .)
    $end            reduce using rule 58 (string -> NORMSTRING1 .)


state 30

    (23) declare_any -> prefix . VARIABLE

    VARIABLE        shift and go to state 58


state 31

    (52) prefix -> LET .

    VARIABLE        reduce using rule 52 (prefix -> LET .)


state 32

    (53) prefix -> VAR .

    VARIABLE        reduce using rule 53 (prefix -> VAR .)


state 33

    (54) prefix -> STATIC .

    VARIABLE        reduce using rule 54 (prefix -> STATIC .)


state 34

    (55) prefix -> CONST .

    VARIABLE        reduce using rule 55 (prefix -> CONST .)


state 35

    (2) statement -> statement_value POINTCOMMA .

    $end            reduce using rule 2 (statement -> statement_value POINTCOMMA .)


state 36

    (34) expression -> expression PLUS . term
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    term                           shift and go to state 59
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 37

    (35) expression -> expression MINUS . term
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    term                           shift and go to state 60
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 38

    (37) term -> term PRODUCT . term
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    term                           shift and go to state 61
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 39

    (38) term -> term DIVIDE . term
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    term                           shift and go to state 62
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 40

    (24) assign -> VARIABLE EQUAL . assign_value
    (25) assign_value -> . expression
    (26) assign_value -> . boolean
    (27) assign_value -> . string
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (59) boolean -> . TRUE
    (60) boolean -> . FALSE
    (58) string -> . NORMSTRING1
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    NORMSTRING1     shift and go to state 29
    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    assign_value                   shift and go to state 63
    expression                     shift and go to state 64
    boolean                        shift and go to state 65
    string                         shift and go to state 66
    term                           shift and go to state 7
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 41

    (39) term -> term1 INCREMENT .

    PRODUCT         reduce using rule 39 (term -> term1 INCREMENT .)
    DIVIDE          reduce using rule 39 (term -> term1 INCREMENT .)
    PLUS            reduce using rule 39 (term -> term1 INCREMENT .)
    MINUS           reduce using rule 39 (term -> term1 INCREMENT .)
    POINTCOMMA      reduce using rule 39 (term -> term1 INCREMENT .)
    $end            reduce using rule 39 (term -> term1 INCREMENT .)
    RPAREN          reduce using rule 39 (term -> term1 INCREMENT .)


state 42

    (41) term -> term1 DECREMENT .

    PRODUCT         reduce using rule 41 (term -> term1 DECREMENT .)
    DIVIDE          reduce using rule 41 (term -> term1 DECREMENT .)
    PLUS            reduce using rule 41 (term -> term1 DECREMENT .)
    MINUS           reduce using rule 41 (term -> term1 DECREMENT .)
    POINTCOMMA      reduce using rule 41 (term -> term1 DECREMENT .)
    $end            reduce using rule 41 (term -> term1 DECREMENT .)
    RPAREN          reduce using rule 41 (term -> term1 DECREMENT .)


state 43

    (40) term -> INCREMENT term1 .

    PRODUCT         reduce using rule 40 (term -> INCREMENT term1 .)
    DIVIDE          reduce using rule 40 (term -> INCREMENT term1 .)
    PLUS            reduce using rule 40 (term -> INCREMENT term1 .)
    MINUS           reduce using rule 40 (term -> INCREMENT term1 .)
    POINTCOMMA      reduce using rule 40 (term -> INCREMENT term1 .)
    $end            reduce using rule 40 (term -> INCREMENT term1 .)
    RPAREN          reduce using rule 40 (term -> INCREMENT term1 .)


state 44

    (43) term1 -> number .

    PRODUCT         reduce using rule 43 (term1 -> number .)
    DIVIDE          reduce using rule 43 (term1 -> number .)
    PLUS            reduce using rule 43 (term1 -> number .)
    MINUS           reduce using rule 43 (term1 -> number .)
    POINTCOMMA      reduce using rule 43 (term1 -> number .)
    $end            reduce using rule 43 (term1 -> number .)
    RPAREN          reduce using rule 43 (term1 -> number .)


state 45

    (44) term1 -> variable .

    PRODUCT         reduce using rule 44 (term1 -> variable .)
    DIVIDE          reduce using rule 44 (term1 -> variable .)
    PLUS            reduce using rule 44 (term1 -> variable .)
    MINUS           reduce using rule 44 (term1 -> variable .)
    POINTCOMMA      reduce using rule 44 (term1 -> variable .)
    $end            reduce using rule 44 (term1 -> variable .)
    RPAREN          reduce using rule 44 (term1 -> variable .)


state 46

    (61) variable -> VARIABLE .

    PRODUCT         reduce using rule 61 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 61 (variable -> VARIABLE .)
    PLUS            reduce using rule 61 (variable -> VARIABLE .)
    MINUS           reduce using rule 61 (variable -> VARIABLE .)
    POINTCOMMA      reduce using rule 61 (variable -> VARIABLE .)
    $end            reduce using rule 61 (variable -> VARIABLE .)
    RPAREN          reduce using rule 61 (variable -> VARIABLE .)
    INCREMENT       reduce using rule 61 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 61 (variable -> VARIABLE .)


state 47

    (46) group -> LPAREN . variable RPAREN
    (47) group -> LPAREN . number RPAREN
    (61) variable -> . VARIABLE
    (56) number -> . NUMBER
    (57) number -> . FLOAT

    VARIABLE        shift and go to state 46
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27

    variable                       shift and go to state 69
    number                         shift and go to state 70

state 48

    (42) term -> DECREMENT term1 .

    PRODUCT         reduce using rule 42 (term -> DECREMENT term1 .)
    DIVIDE          reduce using rule 42 (term -> DECREMENT term1 .)
    PLUS            reduce using rule 42 (term -> DECREMENT term1 .)
    MINUS           reduce using rule 42 (term -> DECREMENT term1 .)
    POINTCOMMA      reduce using rule 42 (term -> DECREMENT term1 .)
    $end            reduce using rule 42 (term -> DECREMENT term1 .)
    RPAREN          reduce using rule 42 (term -> DECREMENT term1 .)


state 49

    (29) termS -> string PLUS . chain
    (30) chain -> . termS PLUS value
    (31) chain -> . value
    (29) termS -> . string PLUS chain
    (32) value -> . expression
    (33) value -> . string
    (58) string -> . NORMSTRING1
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    NORMSTRING1     shift and go to state 29
    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    string                         shift and go to state 71
    chain                          shift and go to state 72
    termS                          shift and go to state 73
    value                          shift and go to state 74
    expression                     shift and go to state 75
    term                           shift and go to state 7
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 50

    (14) var_boolean -> declare_boolean EQUAL . boolean_value
    (16) boolean_value -> . boolean
    (17) boolean_value -> . variable
    (59) boolean -> . TRUE
    (60) boolean -> . FALSE
    (61) variable -> . VARIABLE

    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    VARIABLE        shift and go to state 46

    boolean_value                  shift and go to state 76
    boolean                        shift and go to state 77
    variable                       shift and go to state 78

state 51

    (11) var_number -> declare_number EQUAL . number_value
    (13) number_value -> . expression
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    number_value                   shift and go to state 79
    expression                     shift and go to state 80
    term                           shift and go to state 7
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 52

    (18) var_string -> declare_string EQUAL . string_value
    (20) string_value -> . string
    (21) string_value -> . variable
    (58) string -> . NORMSTRING1
    (61) variable -> . VARIABLE

    NORMSTRING1     shift and go to state 29
    VARIABLE        shift and go to state 46

    string_value                   shift and go to state 81
    string                         shift and go to state 82
    variable                       shift and go to state 83

state 53

    (22) declare_generic -> declare_any EQUAL . assign_value
    (25) assign_value -> . expression
    (26) assign_value -> . boolean
    (27) assign_value -> . string
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (59) boolean -> . TRUE
    (60) boolean -> . FALSE
    (58) string -> . NORMSTRING1
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    NORMSTRING1     shift and go to state 29
    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    assign_value                   shift and go to state 84
    expression                     shift and go to state 64
    boolean                        shift and go to state 65
    string                         shift and go to state 66
    term                           shift and go to state 7
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 54

    (15) declare_boolean -> declare_any TWOPOINTS . VARBOOLEAN
    (12) declare_number -> declare_any TWOPOINTS . VARNUMBER
    (19) declare_string -> declare_any TWOPOINTS . VARSTRING

    VARBOOLEAN      shift and go to state 85
    VARNUMBER       shift and go to state 86
    VARSTRING       shift and go to state 87


state 55

    (51) factor_expr -> LPAREN expression . RPAREN
    (34) expression -> expression . PLUS term
    (35) expression -> expression . MINUS term

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37


state 56

    (46) group -> LPAREN variable . RPAREN
    (50) term -> variable .
    (44) term1 -> variable .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 89
    PRODUCT         reduce using rule 50 (term -> variable .)
    DIVIDE          reduce using rule 50 (term -> variable .)
    PLUS            reduce using rule 50 (term -> variable .)
    MINUS           reduce using rule 50 (term -> variable .)
    INCREMENT       reduce using rule 44 (term1 -> variable .)
    DECREMENT       reduce using rule 44 (term1 -> variable .)

  ! RPAREN          [ reduce using rule 50 (term -> variable .) ]


state 57

    (47) group -> LPAREN number . RPAREN
    (48) term -> number .
    (43) term1 -> number .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 90
    PRODUCT         reduce using rule 48 (term -> number .)
    DIVIDE          reduce using rule 48 (term -> number .)
    PLUS            reduce using rule 48 (term -> number .)
    MINUS           reduce using rule 48 (term -> number .)
    INCREMENT       reduce using rule 43 (term1 -> number .)
    DECREMENT       reduce using rule 43 (term1 -> number .)

  ! RPAREN          [ reduce using rule 48 (term -> number .) ]


state 58

    (23) declare_any -> prefix VARIABLE .

    EQUAL           reduce using rule 23 (declare_any -> prefix VARIABLE .)
    TWOPOINTS       reduce using rule 23 (declare_any -> prefix VARIABLE .)


state 59

    (34) expression -> expression PLUS term .
    (37) term -> term . PRODUCT term
    (38) term -> term . DIVIDE term

    PLUS            reduce using rule 34 (expression -> expression PLUS term .)
    MINUS           reduce using rule 34 (expression -> expression PLUS term .)
    POINTCOMMA      reduce using rule 34 (expression -> expression PLUS term .)
    $end            reduce using rule 34 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 34 (expression -> expression PLUS term .)
    PRODUCT         shift and go to state 38
    DIVIDE          shift and go to state 39


state 60

    (35) expression -> expression MINUS term .
    (37) term -> term . PRODUCT term
    (38) term -> term . DIVIDE term

    PLUS            reduce using rule 35 (expression -> expression MINUS term .)
    MINUS           reduce using rule 35 (expression -> expression MINUS term .)
    POINTCOMMA      reduce using rule 35 (expression -> expression MINUS term .)
    $end            reduce using rule 35 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 35 (expression -> expression MINUS term .)
    PRODUCT         shift and go to state 38
    DIVIDE          shift and go to state 39


state 61

    (37) term -> term PRODUCT term .
    (37) term -> term . PRODUCT term
    (38) term -> term . DIVIDE term

  ! shift/reduce conflict for PRODUCT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 37 (term -> term PRODUCT term .)
    MINUS           reduce using rule 37 (term -> term PRODUCT term .)
    POINTCOMMA      reduce using rule 37 (term -> term PRODUCT term .)
    $end            reduce using rule 37 (term -> term PRODUCT term .)
    RPAREN          reduce using rule 37 (term -> term PRODUCT term .)
    PRODUCT         shift and go to state 38
    DIVIDE          shift and go to state 39

  ! PRODUCT         [ reduce using rule 37 (term -> term PRODUCT term .) ]
  ! DIVIDE          [ reduce using rule 37 (term -> term PRODUCT term .) ]


state 62

    (38) term -> term DIVIDE term .
    (37) term -> term . PRODUCT term
    (38) term -> term . DIVIDE term

  ! shift/reduce conflict for PRODUCT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 38 (term -> term DIVIDE term .)
    MINUS           reduce using rule 38 (term -> term DIVIDE term .)
    POINTCOMMA      reduce using rule 38 (term -> term DIVIDE term .)
    $end            reduce using rule 38 (term -> term DIVIDE term .)
    RPAREN          reduce using rule 38 (term -> term DIVIDE term .)
    PRODUCT         shift and go to state 38
    DIVIDE          shift and go to state 39

  ! PRODUCT         [ reduce using rule 38 (term -> term DIVIDE term .) ]
  ! DIVIDE          [ reduce using rule 38 (term -> term DIVIDE term .) ]


state 63

    (24) assign -> VARIABLE EQUAL assign_value .

    POINTCOMMA      reduce using rule 24 (assign -> VARIABLE EQUAL assign_value .)
    $end            reduce using rule 24 (assign -> VARIABLE EQUAL assign_value .)


state 64

    (25) assign_value -> expression .
    (34) expression -> expression . PLUS term
    (35) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 25 (assign_value -> expression .)
    $end            reduce using rule 25 (assign_value -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37


state 65

    (26) assign_value -> boolean .

    POINTCOMMA      reduce using rule 26 (assign_value -> boolean .)
    $end            reduce using rule 26 (assign_value -> boolean .)


state 66

    (27) assign_value -> string .

    POINTCOMMA      reduce using rule 27 (assign_value -> string .)
    $end            reduce using rule 27 (assign_value -> string .)


state 67

    (59) boolean -> TRUE .

    POINTCOMMA      reduce using rule 59 (boolean -> TRUE .)
    $end            reduce using rule 59 (boolean -> TRUE .)


state 68

    (60) boolean -> FALSE .

    POINTCOMMA      reduce using rule 60 (boolean -> FALSE .)
    $end            reduce using rule 60 (boolean -> FALSE .)


state 69

    (46) group -> LPAREN variable . RPAREN

    RPAREN          shift and go to state 89


state 70

    (47) group -> LPAREN number . RPAREN

    RPAREN          shift and go to state 90


state 71

    (29) termS -> string . PLUS chain
    (33) value -> string .

  ! shift/reduce conflict for PLUS resolved as shift
    PLUS            shift and go to state 49
    POINTCOMMA      reduce using rule 33 (value -> string .)
    $end            reduce using rule 33 (value -> string .)

  ! PLUS            [ reduce using rule 33 (value -> string .) ]


state 72

    (29) termS -> string PLUS chain .

    POINTCOMMA      reduce using rule 29 (termS -> string PLUS chain .)
    $end            reduce using rule 29 (termS -> string PLUS chain .)
    PLUS            reduce using rule 29 (termS -> string PLUS chain .)


state 73

    (30) chain -> termS . PLUS value

    PLUS            shift and go to state 91


state 74

    (31) chain -> value .

    POINTCOMMA      reduce using rule 31 (chain -> value .)
    $end            reduce using rule 31 (chain -> value .)
    PLUS            reduce using rule 31 (chain -> value .)


state 75

    (32) value -> expression .
    (34) expression -> expression . PLUS term
    (35) expression -> expression . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
    POINTCOMMA      reduce using rule 32 (value -> expression .)
    $end            reduce using rule 32 (value -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37

  ! PLUS            [ reduce using rule 32 (value -> expression .) ]


state 76

    (14) var_boolean -> declare_boolean EQUAL boolean_value .

    POINTCOMMA      reduce using rule 14 (var_boolean -> declare_boolean EQUAL boolean_value .)
    $end            reduce using rule 14 (var_boolean -> declare_boolean EQUAL boolean_value .)


state 77

    (16) boolean_value -> boolean .

    POINTCOMMA      reduce using rule 16 (boolean_value -> boolean .)
    $end            reduce using rule 16 (boolean_value -> boolean .)


state 78

    (17) boolean_value -> variable .

    POINTCOMMA      reduce using rule 17 (boolean_value -> variable .)
    $end            reduce using rule 17 (boolean_value -> variable .)


state 79

    (11) var_number -> declare_number EQUAL number_value .

    POINTCOMMA      reduce using rule 11 (var_number -> declare_number EQUAL number_value .)
    $end            reduce using rule 11 (var_number -> declare_number EQUAL number_value .)


state 80

    (13) number_value -> expression .
    (34) expression -> expression . PLUS term
    (35) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 13 (number_value -> expression .)
    $end            reduce using rule 13 (number_value -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37


state 81

    (18) var_string -> declare_string EQUAL string_value .

    POINTCOMMA      reduce using rule 18 (var_string -> declare_string EQUAL string_value .)
    $end            reduce using rule 18 (var_string -> declare_string EQUAL string_value .)


state 82

    (20) string_value -> string .

    POINTCOMMA      reduce using rule 20 (string_value -> string .)
    $end            reduce using rule 20 (string_value -> string .)


state 83

    (21) string_value -> variable .

    POINTCOMMA      reduce using rule 21 (string_value -> variable .)
    $end            reduce using rule 21 (string_value -> variable .)


state 84

    (22) declare_generic -> declare_any EQUAL assign_value .

    POINTCOMMA      reduce using rule 22 (declare_generic -> declare_any EQUAL assign_value .)
    $end            reduce using rule 22 (declare_generic -> declare_any EQUAL assign_value .)


state 85

    (15) declare_boolean -> declare_any TWOPOINTS VARBOOLEAN .

    EQUAL           reduce using rule 15 (declare_boolean -> declare_any TWOPOINTS VARBOOLEAN .)


state 86

    (12) declare_number -> declare_any TWOPOINTS VARNUMBER .

    EQUAL           reduce using rule 12 (declare_number -> declare_any TWOPOINTS VARNUMBER .)


state 87

    (19) declare_string -> declare_any TWOPOINTS VARSTRING .

    EQUAL           reduce using rule 19 (declare_string -> declare_any TWOPOINTS VARSTRING .)


state 88

    (51) factor_expr -> LPAREN expression RPAREN .

    PRODUCT         reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)
    POINTCOMMA      reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)
    $end            reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 51 (factor_expr -> LPAREN expression RPAREN .)


state 89

    (46) group -> LPAREN variable RPAREN .

    INCREMENT       reduce using rule 46 (group -> LPAREN variable RPAREN .)
    DECREMENT       reduce using rule 46 (group -> LPAREN variable RPAREN .)
    PRODUCT         reduce using rule 46 (group -> LPAREN variable RPAREN .)
    DIVIDE          reduce using rule 46 (group -> LPAREN variable RPAREN .)
    PLUS            reduce using rule 46 (group -> LPAREN variable RPAREN .)
    MINUS           reduce using rule 46 (group -> LPAREN variable RPAREN .)
    POINTCOMMA      reduce using rule 46 (group -> LPAREN variable RPAREN .)
    $end            reduce using rule 46 (group -> LPAREN variable RPAREN .)
    RPAREN          reduce using rule 46 (group -> LPAREN variable RPAREN .)


state 90

    (47) group -> LPAREN number RPAREN .

    INCREMENT       reduce using rule 47 (group -> LPAREN number RPAREN .)
    DECREMENT       reduce using rule 47 (group -> LPAREN number RPAREN .)
    PRODUCT         reduce using rule 47 (group -> LPAREN number RPAREN .)
    DIVIDE          reduce using rule 47 (group -> LPAREN number RPAREN .)
    PLUS            reduce using rule 47 (group -> LPAREN number RPAREN .)
    MINUS           reduce using rule 47 (group -> LPAREN number RPAREN .)
    POINTCOMMA      reduce using rule 47 (group -> LPAREN number RPAREN .)
    $end            reduce using rule 47 (group -> LPAREN number RPAREN .)
    RPAREN          reduce using rule 47 (group -> LPAREN number RPAREN .)


state 91

    (30) chain -> termS PLUS . value
    (32) value -> . expression
    (33) value -> . string
    (34) expression -> . expression PLUS term
    (35) expression -> . expression MINUS term
    (36) expression -> . term
    (58) string -> . NORMSTRING1
    (37) term -> . term PRODUCT term
    (38) term -> . term DIVIDE term
    (39) term -> . term1 INCREMENT
    (40) term -> . INCREMENT term1
    (41) term -> . term1 DECREMENT
    (42) term -> . DECREMENT term1
    (48) term -> . number
    (49) term -> . factor_expr
    (50) term -> . variable
    (43) term1 -> . number
    (44) term1 -> . variable
    (45) term1 -> . group
    (56) number -> . NUMBER
    (57) number -> . FLOAT
    (51) factor_expr -> . LPAREN expression RPAREN
    (61) variable -> . VARIABLE
    (46) group -> . LPAREN variable RPAREN
    (47) group -> . LPAREN number RPAREN

    NORMSTRING1     shift and go to state 29
    INCREMENT       shift and go to state 15
    DECREMENT       shift and go to state 16
    NUMBER          shift and go to state 26
    FLOAT           shift and go to state 27
    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 46

    value                          shift and go to state 92
    expression                     shift and go to state 75
    string                         shift and go to state 93
    term                           shift and go to state 7
    term1                          shift and go to state 14
    number                         shift and go to state 17
    factor_expr                    shift and go to state 18
    variable                       shift and go to state 19
    group                          shift and go to state 25

state 92

    (30) chain -> termS PLUS value .

    POINTCOMMA      reduce using rule 30 (chain -> termS PLUS value .)
    $end            reduce using rule 30 (chain -> termS PLUS value .)
    PLUS            reduce using rule 30 (chain -> termS PLUS value .)


state 93

    (33) value -> string .

    POINTCOMMA      reduce using rule 33 (value -> string .)
    $end            reduce using rule 33 (value -> string .)
    PLUS            reduce using rule 33 (value -> string .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for PRODUCT in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for PRODUCT in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
