Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABS
    ANY
    ARRAY
    COMMA
    COMMENT
    DOLLAR
    ELIF
    ELSE
    ENUM
    FOR
    FUNCTIONADD
    FUNCTIONCHARAT
    FUNCTIONCONCAT
    FUNCTIONFILTER
    FUNCTIONHAS
    FUNCTIONJOIN
    FUNCTIONSPLIT
    FUNMATH
    IF
    IN
    INSTANCEOF
    LBRACKET
    LCOMILLA
    LKEY
    MOD
    MULTICOMMENT
    MULTISTRING
    NEW
    NORMSTRING2
    NULL
    OBJECTNAME
    POINT
    POW
    PRINT
    RBRACKET
    RCOMILLA
    RKEY
    ROUND
    SET
    SPECIAL
    TYPEOF
    UNDEFINED
    VAROBJECT
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> statement_value
Rule 2     statement -> statement_value POINTCOMMA
Rule 3     statement_value -> expression
Rule 4     statement_value -> concatenate
Rule 5     statement_value -> declare
Rule 6     statement_value -> assign
Rule 7     statement_value -> expCond
Rule 8     statement_value -> expOpLog
Rule 9     statement_value -> expNeg
Rule 10    statement_value -> expEq
Rule 11    statement_value -> expNotEq
Rule 12    declare -> var_boolean
Rule 13    declare -> var_number
Rule 14    declare -> var_string
Rule 15    declare -> declare_generic
Rule 16    var_number -> declare_number EQUAL number_value
Rule 17    declare_number -> declare_any TWOPOINTS VARNUMBER
Rule 18    number_value -> expression
Rule 19    var_boolean -> declare_boolean EQUAL boolean_value
Rule 20    declare_boolean -> declare_any TWOPOINTS VARBOOLEAN
Rule 21    boolean_value -> boolean
Rule 22    boolean_value -> variable
Rule 23    var_string -> declare_string EQUAL string_value
Rule 24    declare_string -> declare_any TWOPOINTS VARSTRING
Rule 25    string_value -> string
Rule 26    string_value -> variable
Rule 27    declare_generic -> declare_any EQUAL assign_value
Rule 28    declare_any -> prefix VARIABLE
Rule 29    assign -> VARIABLE EQUAL assign_value
Rule 30    assign_value -> expression
Rule 31    assign_value -> boolean
Rule 32    assign_value -> string
Rule 33    concatenate -> termS
Rule 34    termS -> string PLUS chain
Rule 35    chain -> termS PLUS value
Rule 36    chain -> value
Rule 37    value -> expression
Rule 38    value -> string
Rule 39    expression -> expression PLUS term
Rule 40    expression -> expression MINUS term
Rule 41    expression -> term
Rule 42    term -> term PRODUCT term
Rule 43    term -> term DIVIDE term
Rule 44    term -> term1 INCREMENT
Rule 45    term -> INCREMENT term1
Rule 46    term -> term1 DECREMENT
Rule 47    term -> DECREMENT term1
Rule 48    expNeg -> NEGATION expOpLog
Rule 49    expNeg -> NEGATION factor_exprlog
Rule 50    expNeg -> NEGATION boolean
Rule 51    expNeg -> NEGATION LPAREN expOpLog RPAREN
Rule 52    expEq -> expCond EQUALTO expCond
Rule 53    expEq -> factor_exprlog EQUALTO factor_exprlog
Rule 54    expEq -> expression EQUALTO expression
Rule 55    expNotEq -> expCond NOTEQUALTO expCond
Rule 56    expNotEq -> factor_exprlog NOTEQUALTO factor_exprlog
Rule 57    expNotEq -> expression NOTEQUALTO expression
Rule 58    expOpLog -> expCond oplogico expCond
Rule 59    expOpLog -> factor_exprlog oplogico factor_exprlog
Rule 60    expOpLog -> expression oplogico expression
Rule 61    factor_exprlog -> LPAREN expCond RPAREN
Rule 62    expCond -> expression operador expression
Rule 63    term1 -> number
Rule 64    term1 -> variable
Rule 65    term1 -> group
Rule 66    group -> LPAREN variable RPAREN
Rule 67    group -> LPAREN number RPAREN
Rule 68    term -> number
Rule 69    term -> factor_expr
Rule 70    term -> variable
Rule 71    factor_expr -> LPAREN expression RPAREN
Rule 72    prefix -> LET
Rule 73    prefix -> VAR
Rule 74    prefix -> STATIC
Rule 75    prefix -> CONST
Rule 76    number -> NUMBER
Rule 77    number -> FLOAT
Rule 78    string -> NORMSTRING1
Rule 79    boolean -> TRUE
Rule 80    boolean -> FALSE
Rule 81    variable -> VARIABLE
Rule 82    operador -> GREATER
Rule 83    operador -> LESS
Rule 84    operador -> GREATEREQUAL
Rule 85    operador -> LESSEQUAL
Rule 86    operador -> EQUALTO
Rule 87    operador -> NOTEQUALTO
Rule 88    oplogico -> AND
Rule 89    oplogico -> OR

Terminals, with rules where they appear

ABS                  : 
AND                  : 88
ANY                  : 
ARRAY                : 
COMMA                : 
COMMENT              : 
CONST                : 75
DECREMENT            : 46 47
DIVIDE               : 43
DOLLAR               : 
ELIF                 : 
ELSE                 : 
ENUM                 : 
EQUAL                : 16 19 23 27 29
EQUALTO              : 52 53 54 86
FALSE                : 80
FLOAT                : 77
FOR                  : 
FUNCTIONADD          : 
FUNCTIONCHARAT       : 
FUNCTIONCONCAT       : 
FUNCTIONFILTER       : 
FUNCTIONHAS          : 
FUNCTIONJOIN         : 
FUNCTIONSPLIT        : 
FUNMATH              : 
GREATER              : 82
GREATEREQUAL         : 84
IF                   : 
IN                   : 
INCREMENT            : 44 45
INSTANCEOF           : 
LBRACKET             : 
LCOMILLA             : 
LESS                 : 83
LESSEQUAL            : 85
LET                  : 72
LKEY                 : 
LPAREN               : 51 61 66 67 71
MINUS                : 40
MOD                  : 
MULTICOMMENT         : 
MULTISTRING          : 
NEGATION             : 48 49 50 51
NEW                  : 
NORMSTRING1          : 78
NORMSTRING2          : 
NOTEQUALTO           : 55 56 57 87
NULL                 : 
NUMBER               : 76
OBJECTNAME           : 
OR                   : 89
PLUS                 : 34 35 39
POINT                : 
POINTCOMMA           : 2
POW                  : 
PRINT                : 
PRODUCT              : 42
RBRACKET             : 
RCOMILLA             : 
RKEY                 : 
ROUND                : 
RPAREN               : 51 61 66 67 71
SET                  : 
SPECIAL              : 
STATIC               : 74
TRUE                 : 79
TWOPOINTS            : 17 20 24
TYPEOF               : 
UNDEFINED            : 
VAR                  : 73
VARBOOLEAN           : 20
VARIABLE             : 28 29 81
VARNUMBER            : 17
VAROBJECT            : 
VARSTRING            : 24
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assign               : 6
assign_value         : 27 29
boolean              : 21 31 50
boolean_value        : 19
chain                : 34
concatenate          : 4
declare              : 5
declare_any          : 17 20 24 27
declare_boolean      : 19
declare_generic      : 15
declare_number       : 16
declare_string       : 23
expCond              : 7 52 52 55 55 58 58 61
expEq                : 10
expNeg               : 9
expNotEq             : 11
expOpLog             : 8 48 51
expression           : 3 18 30 37 39 40 54 54 57 57 60 60 62 62 71
factor_expr          : 69
factor_exprlog       : 49 53 53 56 56 59 59
group                : 65
number               : 63 67 68
number_value         : 16
operador             : 62
oplogico             : 58 59 60
prefix               : 28
statement            : 0
statement_value      : 1 2
string               : 25 32 34 38
string_value         : 23
term                 : 39 40 41 42 42 43 43
term1                : 44 45 46 47
termS                : 33 35
value                : 35 36
var_boolean          : 12
var_number           : 13
var_string           : 14
variable             : 22 26 64 66 70

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . statement_value
    (2) statement -> . statement_value POINTCOMMA
    (3) statement_value -> . expression
    (4) statement_value -> . concatenate
    (5) statement_value -> . declare
    (6) statement_value -> . assign
    (7) statement_value -> . expCond
    (8) statement_value -> . expOpLog
    (9) statement_value -> . expNeg
    (10) statement_value -> . expEq
    (11) statement_value -> . expNotEq
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (33) concatenate -> . termS
    (12) declare -> . var_boolean
    (13) declare -> . var_number
    (14) declare -> . var_string
    (15) declare -> . declare_generic
    (29) assign -> . VARIABLE EQUAL assign_value
    (62) expCond -> . expression operador expression
    (58) expOpLog -> . expCond oplogico expCond
    (59) expOpLog -> . factor_exprlog oplogico factor_exprlog
    (60) expOpLog -> . expression oplogico expression
    (48) expNeg -> . NEGATION expOpLog
    (49) expNeg -> . NEGATION factor_exprlog
    (50) expNeg -> . NEGATION boolean
    (51) expNeg -> . NEGATION LPAREN expOpLog RPAREN
    (52) expEq -> . expCond EQUALTO expCond
    (53) expEq -> . factor_exprlog EQUALTO factor_exprlog
    (54) expEq -> . expression EQUALTO expression
    (55) expNotEq -> . expCond NOTEQUALTO expCond
    (56) expNotEq -> . factor_exprlog NOTEQUALTO factor_exprlog
    (57) expNotEq -> . expression NOTEQUALTO expression
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (34) termS -> . string PLUS chain
    (19) var_boolean -> . declare_boolean EQUAL boolean_value
    (16) var_number -> . declare_number EQUAL number_value
    (23) var_string -> . declare_string EQUAL string_value
    (27) declare_generic -> . declare_any EQUAL assign_value
    (61) factor_exprlog -> . LPAREN expCond RPAREN
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (78) string -> . NORMSTRING1
    (20) declare_boolean -> . declare_any TWOPOINTS VARBOOLEAN
    (17) declare_number -> . declare_any TWOPOINTS VARNUMBER
    (24) declare_string -> . declare_any TWOPOINTS VARSTRING
    (28) declare_any -> . prefix VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN
    (72) prefix -> . LET
    (73) prefix -> . VAR
    (74) prefix -> . STATIC
    (75) prefix -> . CONST

    VARIABLE        shift and go to state 18
    NEGATION        shift and go to state 20
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    NORMSTRING1     shift and go to state 36
    LET             shift and go to state 38
    VAR             shift and go to state 39
    STATIC          shift and go to state 40
    CONST           shift and go to state 41

    statement                      shift and go to state 1
    statement_value                shift and go to state 2
    expression                     shift and go to state 3
    concatenate                    shift and go to state 4
    declare                        shift and go to state 5
    assign                         shift and go to state 6
    expCond                        shift and go to state 7
    expOpLog                       shift and go to state 8
    expNeg                         shift and go to state 9
    expEq                          shift and go to state 10
    expNotEq                       shift and go to state 11
    term                           shift and go to state 12
    termS                          shift and go to state 13
    var_boolean                    shift and go to state 14
    var_number                     shift and go to state 15
    var_string                     shift and go to state 16
    declare_generic                shift and go to state 17
    factor_exprlog                 shift and go to state 19
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    string                         shift and go to state 28
    declare_boolean                shift and go to state 29
    declare_number                 shift and go to state 30
    declare_string                 shift and go to state 31
    declare_any                    shift and go to state 32
    group                          shift and go to state 33
    prefix                         shift and go to state 37

state 1

    (0) S' -> statement .



state 2

    (1) statement -> statement_value .
    (2) statement -> statement_value . POINTCOMMA

    $end            reduce using rule 1 (statement -> statement_value .)
    POINTCOMMA      shift and go to state 42


state 3

    (3) statement_value -> expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term
    (62) expCond -> expression . operador expression
    (60) expOpLog -> expression . oplogico expression
    (54) expEq -> expression . EQUALTO expression
    (57) expNotEq -> expression . NOTEQUALTO expression
    (82) operador -> . GREATER
    (83) operador -> . LESS
    (84) operador -> . GREATEREQUAL
    (85) operador -> . LESSEQUAL
    (86) operador -> . EQUALTO
    (87) operador -> . NOTEQUALTO
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    POINTCOMMA      reduce using rule 3 (statement_value -> expression .)
    $end            reduce using rule 3 (statement_value -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    EQUALTO         shift and go to state 47
    NOTEQUALTO      shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    GREATEREQUAL    shift and go to state 51
    LESSEQUAL       shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54

    operador                       shift and go to state 45
    oplogico                       shift and go to state 46

state 4

    (4) statement_value -> concatenate .

    POINTCOMMA      reduce using rule 4 (statement_value -> concatenate .)
    $end            reduce using rule 4 (statement_value -> concatenate .)


state 5

    (5) statement_value -> declare .

    POINTCOMMA      reduce using rule 5 (statement_value -> declare .)
    $end            reduce using rule 5 (statement_value -> declare .)


state 6

    (6) statement_value -> assign .

    POINTCOMMA      reduce using rule 6 (statement_value -> assign .)
    $end            reduce using rule 6 (statement_value -> assign .)


state 7

    (7) statement_value -> expCond .
    (58) expOpLog -> expCond . oplogico expCond
    (52) expEq -> expCond . EQUALTO expCond
    (55) expNotEq -> expCond . NOTEQUALTO expCond
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    POINTCOMMA      reduce using rule 7 (statement_value -> expCond .)
    $end            reduce using rule 7 (statement_value -> expCond .)
    EQUALTO         shift and go to state 56
    NOTEQUALTO      shift and go to state 57
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplogico                       shift and go to state 55

state 8

    (8) statement_value -> expOpLog .

    POINTCOMMA      reduce using rule 8 (statement_value -> expOpLog .)
    $end            reduce using rule 8 (statement_value -> expOpLog .)


state 9

    (9) statement_value -> expNeg .

    POINTCOMMA      reduce using rule 9 (statement_value -> expNeg .)
    $end            reduce using rule 9 (statement_value -> expNeg .)


state 10

    (10) statement_value -> expEq .

    POINTCOMMA      reduce using rule 10 (statement_value -> expEq .)
    $end            reduce using rule 10 (statement_value -> expEq .)


state 11

    (11) statement_value -> expNotEq .

    POINTCOMMA      reduce using rule 11 (statement_value -> expNotEq .)
    $end            reduce using rule 11 (statement_value -> expNotEq .)


state 12

    (41) expression -> term .
    (42) term -> term . PRODUCT term
    (43) term -> term . DIVIDE term

    PLUS            reduce using rule 41 (expression -> term .)
    MINUS           reduce using rule 41 (expression -> term .)
    EQUALTO         reduce using rule 41 (expression -> term .)
    NOTEQUALTO      reduce using rule 41 (expression -> term .)
    GREATER         reduce using rule 41 (expression -> term .)
    LESS            reduce using rule 41 (expression -> term .)
    GREATEREQUAL    reduce using rule 41 (expression -> term .)
    LESSEQUAL       reduce using rule 41 (expression -> term .)
    AND             reduce using rule 41 (expression -> term .)
    OR              reduce using rule 41 (expression -> term .)
    POINTCOMMA      reduce using rule 41 (expression -> term .)
    $end            reduce using rule 41 (expression -> term .)
    RPAREN          reduce using rule 41 (expression -> term .)
    PRODUCT         shift and go to state 58
    DIVIDE          shift and go to state 59


state 13

    (33) concatenate -> termS .

    POINTCOMMA      reduce using rule 33 (concatenate -> termS .)
    $end            reduce using rule 33 (concatenate -> termS .)


state 14

    (12) declare -> var_boolean .

    POINTCOMMA      reduce using rule 12 (declare -> var_boolean .)
    $end            reduce using rule 12 (declare -> var_boolean .)


state 15

    (13) declare -> var_number .

    POINTCOMMA      reduce using rule 13 (declare -> var_number .)
    $end            reduce using rule 13 (declare -> var_number .)


state 16

    (14) declare -> var_string .

    POINTCOMMA      reduce using rule 14 (declare -> var_string .)
    $end            reduce using rule 14 (declare -> var_string .)


state 17

    (15) declare -> declare_generic .

    POINTCOMMA      reduce using rule 15 (declare -> declare_generic .)
    $end            reduce using rule 15 (declare -> declare_generic .)


state 18

    (29) assign -> VARIABLE . EQUAL assign_value
    (81) variable -> VARIABLE .

    EQUAL           shift and go to state 60
    PRODUCT         reduce using rule 81 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 81 (variable -> VARIABLE .)
    PLUS            reduce using rule 81 (variable -> VARIABLE .)
    MINUS           reduce using rule 81 (variable -> VARIABLE .)
    EQUALTO         reduce using rule 81 (variable -> VARIABLE .)
    NOTEQUALTO      reduce using rule 81 (variable -> VARIABLE .)
    GREATER         reduce using rule 81 (variable -> VARIABLE .)
    LESS            reduce using rule 81 (variable -> VARIABLE .)
    GREATEREQUAL    reduce using rule 81 (variable -> VARIABLE .)
    LESSEQUAL       reduce using rule 81 (variable -> VARIABLE .)
    AND             reduce using rule 81 (variable -> VARIABLE .)
    OR              reduce using rule 81 (variable -> VARIABLE .)
    POINTCOMMA      reduce using rule 81 (variable -> VARIABLE .)
    $end            reduce using rule 81 (variable -> VARIABLE .)
    INCREMENT       reduce using rule 81 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 81 (variable -> VARIABLE .)


state 19

    (59) expOpLog -> factor_exprlog . oplogico factor_exprlog
    (53) expEq -> factor_exprlog . EQUALTO factor_exprlog
    (56) expNotEq -> factor_exprlog . NOTEQUALTO factor_exprlog
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    EQUALTO         shift and go to state 62
    NOTEQUALTO      shift and go to state 63
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplogico                       shift and go to state 61

state 20

    (48) expNeg -> NEGATION . expOpLog
    (49) expNeg -> NEGATION . factor_exprlog
    (50) expNeg -> NEGATION . boolean
    (51) expNeg -> NEGATION . LPAREN expOpLog RPAREN
    (58) expOpLog -> . expCond oplogico expCond
    (59) expOpLog -> . factor_exprlog oplogico factor_exprlog
    (60) expOpLog -> . expression oplogico expression
    (61) factor_exprlog -> . LPAREN expCond RPAREN
    (79) boolean -> . TRUE
    (80) boolean -> . FALSE
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    LPAREN          shift and go to state 67
    TRUE            shift and go to state 70
    FALSE           shift and go to state 71
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 72

    expOpLog                       shift and go to state 64
    factor_exprlog                 shift and go to state 65
    boolean                        shift and go to state 66
    expCond                        shift and go to state 68
    expression                     shift and go to state 69
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 21

    (61) factor_exprlog -> LPAREN . expCond RPAREN
    (71) factor_expr -> LPAREN . expression RPAREN
    (66) group -> LPAREN . variable RPAREN
    (67) group -> LPAREN . number RPAREN
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (81) variable -> . VARIABLE
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (71) factor_expr -> . LPAREN expression RPAREN
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    VARIABLE        shift and go to state 72
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 73

    expCond                        shift and go to state 74
    expression                     shift and go to state 75
    variable                       shift and go to state 76
    number                         shift and go to state 77
    term                           shift and go to state 12
    term1                          shift and go to state 22
    factor_expr                    shift and go to state 26
    group                          shift and go to state 33

state 22

    (44) term -> term1 . INCREMENT
    (46) term -> term1 . DECREMENT

    INCREMENT       shift and go to state 78
    DECREMENT       shift and go to state 79


state 23

    (45) term -> INCREMENT . term1
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 72
    LPAREN          shift and go to state 83

    term1                          shift and go to state 80
    number                         shift and go to state 81
    variable                       shift and go to state 82
    group                          shift and go to state 33

state 24

    (47) term -> DECREMENT . term1
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    VARIABLE        shift and go to state 72
    LPAREN          shift and go to state 83

    term1                          shift and go to state 84
    number                         shift and go to state 81
    variable                       shift and go to state 82
    group                          shift and go to state 33

state 25

    (68) term -> number .
    (63) term1 -> number .

    PRODUCT         reduce using rule 68 (term -> number .)
    DIVIDE          reduce using rule 68 (term -> number .)
    PLUS            reduce using rule 68 (term -> number .)
    MINUS           reduce using rule 68 (term -> number .)
    EQUALTO         reduce using rule 68 (term -> number .)
    NOTEQUALTO      reduce using rule 68 (term -> number .)
    GREATER         reduce using rule 68 (term -> number .)
    LESS            reduce using rule 68 (term -> number .)
    GREATEREQUAL    reduce using rule 68 (term -> number .)
    LESSEQUAL       reduce using rule 68 (term -> number .)
    AND             reduce using rule 68 (term -> number .)
    OR              reduce using rule 68 (term -> number .)
    POINTCOMMA      reduce using rule 68 (term -> number .)
    $end            reduce using rule 68 (term -> number .)
    RPAREN          reduce using rule 68 (term -> number .)
    INCREMENT       reduce using rule 63 (term1 -> number .)
    DECREMENT       reduce using rule 63 (term1 -> number .)


state 26

    (69) term -> factor_expr .

    PRODUCT         reduce using rule 69 (term -> factor_expr .)
    DIVIDE          reduce using rule 69 (term -> factor_expr .)
    PLUS            reduce using rule 69 (term -> factor_expr .)
    MINUS           reduce using rule 69 (term -> factor_expr .)
    EQUALTO         reduce using rule 69 (term -> factor_expr .)
    NOTEQUALTO      reduce using rule 69 (term -> factor_expr .)
    GREATER         reduce using rule 69 (term -> factor_expr .)
    LESS            reduce using rule 69 (term -> factor_expr .)
    GREATEREQUAL    reduce using rule 69 (term -> factor_expr .)
    LESSEQUAL       reduce using rule 69 (term -> factor_expr .)
    AND             reduce using rule 69 (term -> factor_expr .)
    OR              reduce using rule 69 (term -> factor_expr .)
    POINTCOMMA      reduce using rule 69 (term -> factor_expr .)
    $end            reduce using rule 69 (term -> factor_expr .)
    RPAREN          reduce using rule 69 (term -> factor_expr .)


state 27

    (70) term -> variable .
    (64) term1 -> variable .

    PRODUCT         reduce using rule 70 (term -> variable .)
    DIVIDE          reduce using rule 70 (term -> variable .)
    PLUS            reduce using rule 70 (term -> variable .)
    MINUS           reduce using rule 70 (term -> variable .)
    EQUALTO         reduce using rule 70 (term -> variable .)
    NOTEQUALTO      reduce using rule 70 (term -> variable .)
    GREATER         reduce using rule 70 (term -> variable .)
    LESS            reduce using rule 70 (term -> variable .)
    GREATEREQUAL    reduce using rule 70 (term -> variable .)
    LESSEQUAL       reduce using rule 70 (term -> variable .)
    AND             reduce using rule 70 (term -> variable .)
    OR              reduce using rule 70 (term -> variable .)
    POINTCOMMA      reduce using rule 70 (term -> variable .)
    $end            reduce using rule 70 (term -> variable .)
    RPAREN          reduce using rule 70 (term -> variable .)
    INCREMENT       reduce using rule 64 (term1 -> variable .)
    DECREMENT       reduce using rule 64 (term1 -> variable .)


state 28

    (34) termS -> string . PLUS chain

    PLUS            shift and go to state 85


state 29

    (19) var_boolean -> declare_boolean . EQUAL boolean_value

    EQUAL           shift and go to state 86


state 30

    (16) var_number -> declare_number . EQUAL number_value

    EQUAL           shift and go to state 87


state 31

    (23) var_string -> declare_string . EQUAL string_value

    EQUAL           shift and go to state 88


state 32

    (27) declare_generic -> declare_any . EQUAL assign_value
    (20) declare_boolean -> declare_any . TWOPOINTS VARBOOLEAN
    (17) declare_number -> declare_any . TWOPOINTS VARNUMBER
    (24) declare_string -> declare_any . TWOPOINTS VARSTRING

    EQUAL           shift and go to state 89
    TWOPOINTS       shift and go to state 90


state 33

    (65) term1 -> group .

    INCREMENT       reduce using rule 65 (term1 -> group .)
    DECREMENT       reduce using rule 65 (term1 -> group .)
    PRODUCT         reduce using rule 65 (term1 -> group .)
    DIVIDE          reduce using rule 65 (term1 -> group .)
    PLUS            reduce using rule 65 (term1 -> group .)
    MINUS           reduce using rule 65 (term1 -> group .)
    EQUALTO         reduce using rule 65 (term1 -> group .)
    NOTEQUALTO      reduce using rule 65 (term1 -> group .)
    GREATER         reduce using rule 65 (term1 -> group .)
    LESS            reduce using rule 65 (term1 -> group .)
    GREATEREQUAL    reduce using rule 65 (term1 -> group .)
    LESSEQUAL       reduce using rule 65 (term1 -> group .)
    AND             reduce using rule 65 (term1 -> group .)
    OR              reduce using rule 65 (term1 -> group .)
    POINTCOMMA      reduce using rule 65 (term1 -> group .)
    $end            reduce using rule 65 (term1 -> group .)
    RPAREN          reduce using rule 65 (term1 -> group .)


state 34

    (76) number -> NUMBER .

    PRODUCT         reduce using rule 76 (number -> NUMBER .)
    DIVIDE          reduce using rule 76 (number -> NUMBER .)
    PLUS            reduce using rule 76 (number -> NUMBER .)
    MINUS           reduce using rule 76 (number -> NUMBER .)
    EQUALTO         reduce using rule 76 (number -> NUMBER .)
    NOTEQUALTO      reduce using rule 76 (number -> NUMBER .)
    GREATER         reduce using rule 76 (number -> NUMBER .)
    LESS            reduce using rule 76 (number -> NUMBER .)
    GREATEREQUAL    reduce using rule 76 (number -> NUMBER .)
    LESSEQUAL       reduce using rule 76 (number -> NUMBER .)
    AND             reduce using rule 76 (number -> NUMBER .)
    OR              reduce using rule 76 (number -> NUMBER .)
    POINTCOMMA      reduce using rule 76 (number -> NUMBER .)
    $end            reduce using rule 76 (number -> NUMBER .)
    INCREMENT       reduce using rule 76 (number -> NUMBER .)
    DECREMENT       reduce using rule 76 (number -> NUMBER .)
    RPAREN          reduce using rule 76 (number -> NUMBER .)


state 35

    (77) number -> FLOAT .

    PRODUCT         reduce using rule 77 (number -> FLOAT .)
    DIVIDE          reduce using rule 77 (number -> FLOAT .)
    PLUS            reduce using rule 77 (number -> FLOAT .)
    MINUS           reduce using rule 77 (number -> FLOAT .)
    EQUALTO         reduce using rule 77 (number -> FLOAT .)
    NOTEQUALTO      reduce using rule 77 (number -> FLOAT .)
    GREATER         reduce using rule 77 (number -> FLOAT .)
    LESS            reduce using rule 77 (number -> FLOAT .)
    GREATEREQUAL    reduce using rule 77 (number -> FLOAT .)
    LESSEQUAL       reduce using rule 77 (number -> FLOAT .)
    AND             reduce using rule 77 (number -> FLOAT .)
    OR              reduce using rule 77 (number -> FLOAT .)
    POINTCOMMA      reduce using rule 77 (number -> FLOAT .)
    $end            reduce using rule 77 (number -> FLOAT .)
    INCREMENT       reduce using rule 77 (number -> FLOAT .)
    DECREMENT       reduce using rule 77 (number -> FLOAT .)
    RPAREN          reduce using rule 77 (number -> FLOAT .)


state 36

    (78) string -> NORMSTRING1 .

    PLUS            reduce using rule 78 (string -> NORMSTRING1 .)
    POINTCOMMA      reduce using rule 78 (string -> NORMSTRING1 .)
    $end            reduce using rule 78 (string -> NORMSTRING1 .)


state 37

    (28) declare_any -> prefix . VARIABLE

    VARIABLE        shift and go to state 91


state 38

    (72) prefix -> LET .

    VARIABLE        reduce using rule 72 (prefix -> LET .)


state 39

    (73) prefix -> VAR .

    VARIABLE        reduce using rule 73 (prefix -> VAR .)


state 40

    (74) prefix -> STATIC .

    VARIABLE        reduce using rule 74 (prefix -> STATIC .)


state 41

    (75) prefix -> CONST .

    VARIABLE        reduce using rule 75 (prefix -> CONST .)


state 42

    (2) statement -> statement_value POINTCOMMA .

    $end            reduce using rule 2 (statement -> statement_value POINTCOMMA .)


state 43

    (39) expression -> expression PLUS . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    term                           shift and go to state 92
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 44

    (40) expression -> expression MINUS . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    term                           shift and go to state 93
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 45

    (62) expCond -> expression operador . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    expression                     shift and go to state 94
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 46

    (60) expOpLog -> expression oplogico . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    expression                     shift and go to state 95
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 47

    (54) expEq -> expression EQUALTO . expression
    (86) operador -> EQUALTO .
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

  ! INCREMENT       [ reduce using rule 86 (operador -> EQUALTO .) ]
  ! DECREMENT       [ reduce using rule 86 (operador -> EQUALTO .) ]
  ! NUMBER          [ reduce using rule 86 (operador -> EQUALTO .) ]
  ! FLOAT           [ reduce using rule 86 (operador -> EQUALTO .) ]
  ! LPAREN          [ reduce using rule 86 (operador -> EQUALTO .) ]
  ! VARIABLE        [ reduce using rule 86 (operador -> EQUALTO .) ]

    expression                     shift and go to state 96
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 48

    (57) expNotEq -> expression NOTEQUALTO . expression
    (87) operador -> NOTEQUALTO .
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

  ! INCREMENT       [ reduce using rule 87 (operador -> NOTEQUALTO .) ]
  ! DECREMENT       [ reduce using rule 87 (operador -> NOTEQUALTO .) ]
  ! NUMBER          [ reduce using rule 87 (operador -> NOTEQUALTO .) ]
  ! FLOAT           [ reduce using rule 87 (operador -> NOTEQUALTO .) ]
  ! LPAREN          [ reduce using rule 87 (operador -> NOTEQUALTO .) ]
  ! VARIABLE        [ reduce using rule 87 (operador -> NOTEQUALTO .) ]

    expression                     shift and go to state 97
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 49

    (82) operador -> GREATER .

    INCREMENT       reduce using rule 82 (operador -> GREATER .)
    DECREMENT       reduce using rule 82 (operador -> GREATER .)
    NUMBER          reduce using rule 82 (operador -> GREATER .)
    FLOAT           reduce using rule 82 (operador -> GREATER .)
    LPAREN          reduce using rule 82 (operador -> GREATER .)
    VARIABLE        reduce using rule 82 (operador -> GREATER .)


state 50

    (83) operador -> LESS .

    INCREMENT       reduce using rule 83 (operador -> LESS .)
    DECREMENT       reduce using rule 83 (operador -> LESS .)
    NUMBER          reduce using rule 83 (operador -> LESS .)
    FLOAT           reduce using rule 83 (operador -> LESS .)
    LPAREN          reduce using rule 83 (operador -> LESS .)
    VARIABLE        reduce using rule 83 (operador -> LESS .)


state 51

    (84) operador -> GREATEREQUAL .

    INCREMENT       reduce using rule 84 (operador -> GREATEREQUAL .)
    DECREMENT       reduce using rule 84 (operador -> GREATEREQUAL .)
    NUMBER          reduce using rule 84 (operador -> GREATEREQUAL .)
    FLOAT           reduce using rule 84 (operador -> GREATEREQUAL .)
    LPAREN          reduce using rule 84 (operador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 84 (operador -> GREATEREQUAL .)


state 52

    (85) operador -> LESSEQUAL .

    INCREMENT       reduce using rule 85 (operador -> LESSEQUAL .)
    DECREMENT       reduce using rule 85 (operador -> LESSEQUAL .)
    NUMBER          reduce using rule 85 (operador -> LESSEQUAL .)
    FLOAT           reduce using rule 85 (operador -> LESSEQUAL .)
    LPAREN          reduce using rule 85 (operador -> LESSEQUAL .)
    VARIABLE        reduce using rule 85 (operador -> LESSEQUAL .)


state 53

    (88) oplogico -> AND .

    INCREMENT       reduce using rule 88 (oplogico -> AND .)
    DECREMENT       reduce using rule 88 (oplogico -> AND .)
    NUMBER          reduce using rule 88 (oplogico -> AND .)
    FLOAT           reduce using rule 88 (oplogico -> AND .)
    LPAREN          reduce using rule 88 (oplogico -> AND .)
    VARIABLE        reduce using rule 88 (oplogico -> AND .)


state 54

    (89) oplogico -> OR .

    INCREMENT       reduce using rule 89 (oplogico -> OR .)
    DECREMENT       reduce using rule 89 (oplogico -> OR .)
    NUMBER          reduce using rule 89 (oplogico -> OR .)
    FLOAT           reduce using rule 89 (oplogico -> OR .)
    LPAREN          reduce using rule 89 (oplogico -> OR .)
    VARIABLE        reduce using rule 89 (oplogico -> OR .)


state 55

    (58) expOpLog -> expCond oplogico . expCond
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    expCond                        shift and go to state 98
    expression                     shift and go to state 99
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 56

    (52) expEq -> expCond EQUALTO . expCond
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    expCond                        shift and go to state 100
    expression                     shift and go to state 99
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 57

    (55) expNotEq -> expCond NOTEQUALTO . expCond
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    expCond                        shift and go to state 101
    expression                     shift and go to state 99
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 58

    (42) term -> term PRODUCT . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    term                           shift and go to state 102
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 59

    (43) term -> term DIVIDE . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    term                           shift and go to state 103
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 60

    (29) assign -> VARIABLE EQUAL . assign_value
    (30) assign_value -> . expression
    (31) assign_value -> . boolean
    (32) assign_value -> . string
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (79) boolean -> . TRUE
    (80) boolean -> . FALSE
    (78) string -> . NORMSTRING1
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    TRUE            shift and go to state 70
    FALSE           shift and go to state 71
    NORMSTRING1     shift and go to state 36
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    assign_value                   shift and go to state 104
    expression                     shift and go to state 105
    boolean                        shift and go to state 106
    string                         shift and go to state 107
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 61

    (59) expOpLog -> factor_exprlog oplogico . factor_exprlog
    (61) factor_exprlog -> . LPAREN expCond RPAREN

    LPAREN          shift and go to state 109

    factor_exprlog                 shift and go to state 108

state 62

    (53) expEq -> factor_exprlog EQUALTO . factor_exprlog
    (61) factor_exprlog -> . LPAREN expCond RPAREN

    LPAREN          shift and go to state 109

    factor_exprlog                 shift and go to state 110

state 63

    (56) expNotEq -> factor_exprlog NOTEQUALTO . factor_exprlog
    (61) factor_exprlog -> . LPAREN expCond RPAREN

    LPAREN          shift and go to state 109

    factor_exprlog                 shift and go to state 111

state 64

    (48) expNeg -> NEGATION expOpLog .

    POINTCOMMA      reduce using rule 48 (expNeg -> NEGATION expOpLog .)
    $end            reduce using rule 48 (expNeg -> NEGATION expOpLog .)


state 65

    (49) expNeg -> NEGATION factor_exprlog .
    (59) expOpLog -> factor_exprlog . oplogico factor_exprlog
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    POINTCOMMA      reduce using rule 49 (expNeg -> NEGATION factor_exprlog .)
    $end            reduce using rule 49 (expNeg -> NEGATION factor_exprlog .)
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplogico                       shift and go to state 61

state 66

    (50) expNeg -> NEGATION boolean .

    POINTCOMMA      reduce using rule 50 (expNeg -> NEGATION boolean .)
    $end            reduce using rule 50 (expNeg -> NEGATION boolean .)


state 67

    (51) expNeg -> NEGATION LPAREN . expOpLog RPAREN
    (61) factor_exprlog -> LPAREN . expCond RPAREN
    (71) factor_expr -> LPAREN . expression RPAREN
    (66) group -> LPAREN . variable RPAREN
    (67) group -> LPAREN . number RPAREN
    (58) expOpLog -> . expCond oplogico expCond
    (59) expOpLog -> . factor_exprlog oplogico factor_exprlog
    (60) expOpLog -> . expression oplogico expression
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (81) variable -> . VARIABLE
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (61) factor_exprlog -> . LPAREN expCond RPAREN
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (71) factor_expr -> . LPAREN expression RPAREN
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    VARIABLE        shift and go to state 72
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 21
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24

    expOpLog                       shift and go to state 112
    expCond                        shift and go to state 113
    expression                     shift and go to state 114
    variable                       shift and go to state 76
    number                         shift and go to state 77
    factor_exprlog                 shift and go to state 115
    term                           shift and go to state 12
    term1                          shift and go to state 22
    factor_expr                    shift and go to state 26
    group                          shift and go to state 33

state 68

    (58) expOpLog -> expCond . oplogico expCond
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    AND             shift and go to state 53
    OR              shift and go to state 54

    oplogico                       shift and go to state 55

state 69

    (60) expOpLog -> expression . oplogico expression
    (62) expCond -> expression . operador expression
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term
    (88) oplogico -> . AND
    (89) oplogico -> . OR
    (82) operador -> . GREATER
    (83) operador -> . LESS
    (84) operador -> . GREATEREQUAL
    (85) operador -> . LESSEQUAL
    (86) operador -> . EQUALTO
    (87) operador -> . NOTEQUALTO

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    GREATEREQUAL    shift and go to state 51
    LESSEQUAL       shift and go to state 52
    EQUALTO         shift and go to state 116
    NOTEQUALTO      shift and go to state 117

    oplogico                       shift and go to state 46
    operador                       shift and go to state 45

state 70

    (79) boolean -> TRUE .

    POINTCOMMA      reduce using rule 79 (boolean -> TRUE .)
    $end            reduce using rule 79 (boolean -> TRUE .)


state 71

    (80) boolean -> FALSE .

    POINTCOMMA      reduce using rule 80 (boolean -> FALSE .)
    $end            reduce using rule 80 (boolean -> FALSE .)


state 72

    (81) variable -> VARIABLE .

    PRODUCT         reduce using rule 81 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 81 (variable -> VARIABLE .)
    PLUS            reduce using rule 81 (variable -> VARIABLE .)
    MINUS           reduce using rule 81 (variable -> VARIABLE .)
    AND             reduce using rule 81 (variable -> VARIABLE .)
    OR              reduce using rule 81 (variable -> VARIABLE .)
    GREATER         reduce using rule 81 (variable -> VARIABLE .)
    LESS            reduce using rule 81 (variable -> VARIABLE .)
    GREATEREQUAL    reduce using rule 81 (variable -> VARIABLE .)
    LESSEQUAL       reduce using rule 81 (variable -> VARIABLE .)
    EQUALTO         reduce using rule 81 (variable -> VARIABLE .)
    NOTEQUALTO      reduce using rule 81 (variable -> VARIABLE .)
    INCREMENT       reduce using rule 81 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 81 (variable -> VARIABLE .)
    RPAREN          reduce using rule 81 (variable -> VARIABLE .)
    POINTCOMMA      reduce using rule 81 (variable -> VARIABLE .)
    $end            reduce using rule 81 (variable -> VARIABLE .)


state 73

    (71) factor_expr -> LPAREN . expression RPAREN
    (66) group -> LPAREN . variable RPAREN
    (67) group -> LPAREN . number RPAREN
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (81) variable -> . VARIABLE
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (71) factor_expr -> . LPAREN expression RPAREN
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    VARIABLE        shift and go to state 72
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 73

    expression                     shift and go to state 118
    variable                       shift and go to state 76
    number                         shift and go to state 77
    term                           shift and go to state 12
    term1                          shift and go to state 22
    factor_expr                    shift and go to state 26
    group                          shift and go to state 33

state 74

    (61) factor_exprlog -> LPAREN expCond . RPAREN

    RPAREN          shift and go to state 119


state 75

    (71) factor_expr -> LPAREN expression . RPAREN
    (62) expCond -> expression . operador expression
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term
    (82) operador -> . GREATER
    (83) operador -> . LESS
    (84) operador -> . GREATEREQUAL
    (85) operador -> . LESSEQUAL
    (86) operador -> . EQUALTO
    (87) operador -> . NOTEQUALTO

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    GREATEREQUAL    shift and go to state 51
    LESSEQUAL       shift and go to state 52
    EQUALTO         shift and go to state 116
    NOTEQUALTO      shift and go to state 117

    operador                       shift and go to state 45

state 76

    (66) group -> LPAREN variable . RPAREN
    (70) term -> variable .
    (64) term1 -> variable .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 121
    PRODUCT         reduce using rule 70 (term -> variable .)
    DIVIDE          reduce using rule 70 (term -> variable .)
    PLUS            reduce using rule 70 (term -> variable .)
    MINUS           reduce using rule 70 (term -> variable .)
    GREATER         reduce using rule 70 (term -> variable .)
    LESS            reduce using rule 70 (term -> variable .)
    GREATEREQUAL    reduce using rule 70 (term -> variable .)
    LESSEQUAL       reduce using rule 70 (term -> variable .)
    EQUALTO         reduce using rule 70 (term -> variable .)
    NOTEQUALTO      reduce using rule 70 (term -> variable .)
    AND             reduce using rule 70 (term -> variable .)
    OR              reduce using rule 70 (term -> variable .)
    INCREMENT       reduce using rule 64 (term1 -> variable .)
    DECREMENT       reduce using rule 64 (term1 -> variable .)

  ! RPAREN          [ reduce using rule 70 (term -> variable .) ]


state 77

    (67) group -> LPAREN number . RPAREN
    (68) term -> number .
    (63) term1 -> number .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 122
    PRODUCT         reduce using rule 68 (term -> number .)
    DIVIDE          reduce using rule 68 (term -> number .)
    PLUS            reduce using rule 68 (term -> number .)
    MINUS           reduce using rule 68 (term -> number .)
    GREATER         reduce using rule 68 (term -> number .)
    LESS            reduce using rule 68 (term -> number .)
    GREATEREQUAL    reduce using rule 68 (term -> number .)
    LESSEQUAL       reduce using rule 68 (term -> number .)
    EQUALTO         reduce using rule 68 (term -> number .)
    NOTEQUALTO      reduce using rule 68 (term -> number .)
    AND             reduce using rule 68 (term -> number .)
    OR              reduce using rule 68 (term -> number .)
    INCREMENT       reduce using rule 63 (term1 -> number .)
    DECREMENT       reduce using rule 63 (term1 -> number .)

  ! RPAREN          [ reduce using rule 68 (term -> number .) ]


state 78

    (44) term -> term1 INCREMENT .

    PRODUCT         reduce using rule 44 (term -> term1 INCREMENT .)
    DIVIDE          reduce using rule 44 (term -> term1 INCREMENT .)
    PLUS            reduce using rule 44 (term -> term1 INCREMENT .)
    MINUS           reduce using rule 44 (term -> term1 INCREMENT .)
    EQUALTO         reduce using rule 44 (term -> term1 INCREMENT .)
    NOTEQUALTO      reduce using rule 44 (term -> term1 INCREMENT .)
    GREATER         reduce using rule 44 (term -> term1 INCREMENT .)
    LESS            reduce using rule 44 (term -> term1 INCREMENT .)
    GREATEREQUAL    reduce using rule 44 (term -> term1 INCREMENT .)
    LESSEQUAL       reduce using rule 44 (term -> term1 INCREMENT .)
    AND             reduce using rule 44 (term -> term1 INCREMENT .)
    OR              reduce using rule 44 (term -> term1 INCREMENT .)
    POINTCOMMA      reduce using rule 44 (term -> term1 INCREMENT .)
    $end            reduce using rule 44 (term -> term1 INCREMENT .)
    RPAREN          reduce using rule 44 (term -> term1 INCREMENT .)


state 79

    (46) term -> term1 DECREMENT .

    PRODUCT         reduce using rule 46 (term -> term1 DECREMENT .)
    DIVIDE          reduce using rule 46 (term -> term1 DECREMENT .)
    PLUS            reduce using rule 46 (term -> term1 DECREMENT .)
    MINUS           reduce using rule 46 (term -> term1 DECREMENT .)
    EQUALTO         reduce using rule 46 (term -> term1 DECREMENT .)
    NOTEQUALTO      reduce using rule 46 (term -> term1 DECREMENT .)
    GREATER         reduce using rule 46 (term -> term1 DECREMENT .)
    LESS            reduce using rule 46 (term -> term1 DECREMENT .)
    GREATEREQUAL    reduce using rule 46 (term -> term1 DECREMENT .)
    LESSEQUAL       reduce using rule 46 (term -> term1 DECREMENT .)
    AND             reduce using rule 46 (term -> term1 DECREMENT .)
    OR              reduce using rule 46 (term -> term1 DECREMENT .)
    POINTCOMMA      reduce using rule 46 (term -> term1 DECREMENT .)
    $end            reduce using rule 46 (term -> term1 DECREMENT .)
    RPAREN          reduce using rule 46 (term -> term1 DECREMENT .)


state 80

    (45) term -> INCREMENT term1 .

    PRODUCT         reduce using rule 45 (term -> INCREMENT term1 .)
    DIVIDE          reduce using rule 45 (term -> INCREMENT term1 .)
    PLUS            reduce using rule 45 (term -> INCREMENT term1 .)
    MINUS           reduce using rule 45 (term -> INCREMENT term1 .)
    EQUALTO         reduce using rule 45 (term -> INCREMENT term1 .)
    NOTEQUALTO      reduce using rule 45 (term -> INCREMENT term1 .)
    GREATER         reduce using rule 45 (term -> INCREMENT term1 .)
    LESS            reduce using rule 45 (term -> INCREMENT term1 .)
    GREATEREQUAL    reduce using rule 45 (term -> INCREMENT term1 .)
    LESSEQUAL       reduce using rule 45 (term -> INCREMENT term1 .)
    AND             reduce using rule 45 (term -> INCREMENT term1 .)
    OR              reduce using rule 45 (term -> INCREMENT term1 .)
    POINTCOMMA      reduce using rule 45 (term -> INCREMENT term1 .)
    $end            reduce using rule 45 (term -> INCREMENT term1 .)
    RPAREN          reduce using rule 45 (term -> INCREMENT term1 .)


state 81

    (63) term1 -> number .

    PRODUCT         reduce using rule 63 (term1 -> number .)
    DIVIDE          reduce using rule 63 (term1 -> number .)
    PLUS            reduce using rule 63 (term1 -> number .)
    MINUS           reduce using rule 63 (term1 -> number .)
    EQUALTO         reduce using rule 63 (term1 -> number .)
    NOTEQUALTO      reduce using rule 63 (term1 -> number .)
    GREATER         reduce using rule 63 (term1 -> number .)
    LESS            reduce using rule 63 (term1 -> number .)
    GREATEREQUAL    reduce using rule 63 (term1 -> number .)
    LESSEQUAL       reduce using rule 63 (term1 -> number .)
    AND             reduce using rule 63 (term1 -> number .)
    OR              reduce using rule 63 (term1 -> number .)
    POINTCOMMA      reduce using rule 63 (term1 -> number .)
    $end            reduce using rule 63 (term1 -> number .)
    RPAREN          reduce using rule 63 (term1 -> number .)


state 82

    (64) term1 -> variable .

    PRODUCT         reduce using rule 64 (term1 -> variable .)
    DIVIDE          reduce using rule 64 (term1 -> variable .)
    PLUS            reduce using rule 64 (term1 -> variable .)
    MINUS           reduce using rule 64 (term1 -> variable .)
    EQUALTO         reduce using rule 64 (term1 -> variable .)
    NOTEQUALTO      reduce using rule 64 (term1 -> variable .)
    GREATER         reduce using rule 64 (term1 -> variable .)
    LESS            reduce using rule 64 (term1 -> variable .)
    GREATEREQUAL    reduce using rule 64 (term1 -> variable .)
    LESSEQUAL       reduce using rule 64 (term1 -> variable .)
    AND             reduce using rule 64 (term1 -> variable .)
    OR              reduce using rule 64 (term1 -> variable .)
    POINTCOMMA      reduce using rule 64 (term1 -> variable .)
    $end            reduce using rule 64 (term1 -> variable .)
    RPAREN          reduce using rule 64 (term1 -> variable .)


state 83

    (66) group -> LPAREN . variable RPAREN
    (67) group -> LPAREN . number RPAREN
    (81) variable -> . VARIABLE
    (76) number -> . NUMBER
    (77) number -> . FLOAT

    VARIABLE        shift and go to state 72
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35

    variable                       shift and go to state 123
    number                         shift and go to state 124

state 84

    (47) term -> DECREMENT term1 .

    PRODUCT         reduce using rule 47 (term -> DECREMENT term1 .)
    DIVIDE          reduce using rule 47 (term -> DECREMENT term1 .)
    PLUS            reduce using rule 47 (term -> DECREMENT term1 .)
    MINUS           reduce using rule 47 (term -> DECREMENT term1 .)
    EQUALTO         reduce using rule 47 (term -> DECREMENT term1 .)
    NOTEQUALTO      reduce using rule 47 (term -> DECREMENT term1 .)
    GREATER         reduce using rule 47 (term -> DECREMENT term1 .)
    LESS            reduce using rule 47 (term -> DECREMENT term1 .)
    GREATEREQUAL    reduce using rule 47 (term -> DECREMENT term1 .)
    LESSEQUAL       reduce using rule 47 (term -> DECREMENT term1 .)
    AND             reduce using rule 47 (term -> DECREMENT term1 .)
    OR              reduce using rule 47 (term -> DECREMENT term1 .)
    POINTCOMMA      reduce using rule 47 (term -> DECREMENT term1 .)
    $end            reduce using rule 47 (term -> DECREMENT term1 .)
    RPAREN          reduce using rule 47 (term -> DECREMENT term1 .)


state 85

    (34) termS -> string PLUS . chain
    (35) chain -> . termS PLUS value
    (36) chain -> . value
    (34) termS -> . string PLUS chain
    (37) value -> . expression
    (38) value -> . string
    (78) string -> . NORMSTRING1
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    NORMSTRING1     shift and go to state 36
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    string                         shift and go to state 125
    chain                          shift and go to state 126
    termS                          shift and go to state 127
    value                          shift and go to state 128
    expression                     shift and go to state 129
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 86

    (19) var_boolean -> declare_boolean EQUAL . boolean_value
    (21) boolean_value -> . boolean
    (22) boolean_value -> . variable
    (79) boolean -> . TRUE
    (80) boolean -> . FALSE
    (81) variable -> . VARIABLE

    TRUE            shift and go to state 70
    FALSE           shift and go to state 71
    VARIABLE        shift and go to state 72

    boolean_value                  shift and go to state 130
    boolean                        shift and go to state 131
    variable                       shift and go to state 132

state 87

    (16) var_number -> declare_number EQUAL . number_value
    (18) number_value -> . expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    number_value                   shift and go to state 133
    expression                     shift and go to state 134
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 88

    (23) var_string -> declare_string EQUAL . string_value
    (25) string_value -> . string
    (26) string_value -> . variable
    (78) string -> . NORMSTRING1
    (81) variable -> . VARIABLE

    NORMSTRING1     shift and go to state 36
    VARIABLE        shift and go to state 72

    string_value                   shift and go to state 135
    string                         shift and go to state 136
    variable                       shift and go to state 137

state 89

    (27) declare_generic -> declare_any EQUAL . assign_value
    (30) assign_value -> . expression
    (31) assign_value -> . boolean
    (32) assign_value -> . string
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (79) boolean -> . TRUE
    (80) boolean -> . FALSE
    (78) string -> . NORMSTRING1
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    TRUE            shift and go to state 70
    FALSE           shift and go to state 71
    NORMSTRING1     shift and go to state 36
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    assign_value                   shift and go to state 138
    expression                     shift and go to state 105
    boolean                        shift and go to state 106
    string                         shift and go to state 107
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 90

    (20) declare_boolean -> declare_any TWOPOINTS . VARBOOLEAN
    (17) declare_number -> declare_any TWOPOINTS . VARNUMBER
    (24) declare_string -> declare_any TWOPOINTS . VARSTRING

    VARBOOLEAN      shift and go to state 139
    VARNUMBER       shift and go to state 140
    VARSTRING       shift and go to state 141


state 91

    (28) declare_any -> prefix VARIABLE .

    EQUAL           reduce using rule 28 (declare_any -> prefix VARIABLE .)
    TWOPOINTS       reduce using rule 28 (declare_any -> prefix VARIABLE .)


state 92

    (39) expression -> expression PLUS term .
    (42) term -> term . PRODUCT term
    (43) term -> term . DIVIDE term

    PLUS            reduce using rule 39 (expression -> expression PLUS term .)
    MINUS           reduce using rule 39 (expression -> expression PLUS term .)
    EQUALTO         reduce using rule 39 (expression -> expression PLUS term .)
    NOTEQUALTO      reduce using rule 39 (expression -> expression PLUS term .)
    GREATER         reduce using rule 39 (expression -> expression PLUS term .)
    LESS            reduce using rule 39 (expression -> expression PLUS term .)
    GREATEREQUAL    reduce using rule 39 (expression -> expression PLUS term .)
    LESSEQUAL       reduce using rule 39 (expression -> expression PLUS term .)
    AND             reduce using rule 39 (expression -> expression PLUS term .)
    OR              reduce using rule 39 (expression -> expression PLUS term .)
    POINTCOMMA      reduce using rule 39 (expression -> expression PLUS term .)
    $end            reduce using rule 39 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 39 (expression -> expression PLUS term .)
    PRODUCT         shift and go to state 58
    DIVIDE          shift and go to state 59


state 93

    (40) expression -> expression MINUS term .
    (42) term -> term . PRODUCT term
    (43) term -> term . DIVIDE term

    PLUS            reduce using rule 40 (expression -> expression MINUS term .)
    MINUS           reduce using rule 40 (expression -> expression MINUS term .)
    EQUALTO         reduce using rule 40 (expression -> expression MINUS term .)
    NOTEQUALTO      reduce using rule 40 (expression -> expression MINUS term .)
    GREATER         reduce using rule 40 (expression -> expression MINUS term .)
    LESS            reduce using rule 40 (expression -> expression MINUS term .)
    GREATEREQUAL    reduce using rule 40 (expression -> expression MINUS term .)
    LESSEQUAL       reduce using rule 40 (expression -> expression MINUS term .)
    AND             reduce using rule 40 (expression -> expression MINUS term .)
    OR              reduce using rule 40 (expression -> expression MINUS term .)
    POINTCOMMA      reduce using rule 40 (expression -> expression MINUS term .)
    $end            reduce using rule 40 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 40 (expression -> expression MINUS term .)
    PRODUCT         shift and go to state 58
    DIVIDE          shift and go to state 59


state 94

    (62) expCond -> expression operador expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    EQUALTO         reduce using rule 62 (expCond -> expression operador expression .)
    NOTEQUALTO      reduce using rule 62 (expCond -> expression operador expression .)
    AND             reduce using rule 62 (expCond -> expression operador expression .)
    OR              reduce using rule 62 (expCond -> expression operador expression .)
    POINTCOMMA      reduce using rule 62 (expCond -> expression operador expression .)
    $end            reduce using rule 62 (expCond -> expression operador expression .)
    RPAREN          reduce using rule 62 (expCond -> expression operador expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 95

    (60) expOpLog -> expression oplogico expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 60 (expOpLog -> expression oplogico expression .)
    $end            reduce using rule 60 (expOpLog -> expression oplogico expression .)
    RPAREN          reduce using rule 60 (expOpLog -> expression oplogico expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 96

    (54) expEq -> expression EQUALTO expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 54 (expEq -> expression EQUALTO expression .)
    $end            reduce using rule 54 (expEq -> expression EQUALTO expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 97

    (57) expNotEq -> expression NOTEQUALTO expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 57 (expNotEq -> expression NOTEQUALTO expression .)
    $end            reduce using rule 57 (expNotEq -> expression NOTEQUALTO expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 98

    (58) expOpLog -> expCond oplogico expCond .

    POINTCOMMA      reduce using rule 58 (expOpLog -> expCond oplogico expCond .)
    $end            reduce using rule 58 (expOpLog -> expCond oplogico expCond .)
    RPAREN          reduce using rule 58 (expOpLog -> expCond oplogico expCond .)


state 99

    (62) expCond -> expression . operador expression
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term
    (82) operador -> . GREATER
    (83) operador -> . LESS
    (84) operador -> . GREATEREQUAL
    (85) operador -> . LESSEQUAL
    (86) operador -> . EQUALTO
    (87) operador -> . NOTEQUALTO

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    GREATEREQUAL    shift and go to state 51
    LESSEQUAL       shift and go to state 52
    EQUALTO         shift and go to state 116
    NOTEQUALTO      shift and go to state 117

    operador                       shift and go to state 45

state 100

    (52) expEq -> expCond EQUALTO expCond .

    POINTCOMMA      reduce using rule 52 (expEq -> expCond EQUALTO expCond .)
    $end            reduce using rule 52 (expEq -> expCond EQUALTO expCond .)


state 101

    (55) expNotEq -> expCond NOTEQUALTO expCond .

    POINTCOMMA      reduce using rule 55 (expNotEq -> expCond NOTEQUALTO expCond .)
    $end            reduce using rule 55 (expNotEq -> expCond NOTEQUALTO expCond .)


state 102

    (42) term -> term PRODUCT term .
    (42) term -> term . PRODUCT term
    (43) term -> term . DIVIDE term

  ! shift/reduce conflict for PRODUCT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 42 (term -> term PRODUCT term .)
    MINUS           reduce using rule 42 (term -> term PRODUCT term .)
    EQUALTO         reduce using rule 42 (term -> term PRODUCT term .)
    NOTEQUALTO      reduce using rule 42 (term -> term PRODUCT term .)
    GREATER         reduce using rule 42 (term -> term PRODUCT term .)
    LESS            reduce using rule 42 (term -> term PRODUCT term .)
    GREATEREQUAL    reduce using rule 42 (term -> term PRODUCT term .)
    LESSEQUAL       reduce using rule 42 (term -> term PRODUCT term .)
    AND             reduce using rule 42 (term -> term PRODUCT term .)
    OR              reduce using rule 42 (term -> term PRODUCT term .)
    POINTCOMMA      reduce using rule 42 (term -> term PRODUCT term .)
    $end            reduce using rule 42 (term -> term PRODUCT term .)
    RPAREN          reduce using rule 42 (term -> term PRODUCT term .)
    PRODUCT         shift and go to state 58
    DIVIDE          shift and go to state 59

  ! PRODUCT         [ reduce using rule 42 (term -> term PRODUCT term .) ]
  ! DIVIDE          [ reduce using rule 42 (term -> term PRODUCT term .) ]


state 103

    (43) term -> term DIVIDE term .
    (42) term -> term . PRODUCT term
    (43) term -> term . DIVIDE term

  ! shift/reduce conflict for PRODUCT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 43 (term -> term DIVIDE term .)
    MINUS           reduce using rule 43 (term -> term DIVIDE term .)
    EQUALTO         reduce using rule 43 (term -> term DIVIDE term .)
    NOTEQUALTO      reduce using rule 43 (term -> term DIVIDE term .)
    GREATER         reduce using rule 43 (term -> term DIVIDE term .)
    LESS            reduce using rule 43 (term -> term DIVIDE term .)
    GREATEREQUAL    reduce using rule 43 (term -> term DIVIDE term .)
    LESSEQUAL       reduce using rule 43 (term -> term DIVIDE term .)
    AND             reduce using rule 43 (term -> term DIVIDE term .)
    OR              reduce using rule 43 (term -> term DIVIDE term .)
    POINTCOMMA      reduce using rule 43 (term -> term DIVIDE term .)
    $end            reduce using rule 43 (term -> term DIVIDE term .)
    RPAREN          reduce using rule 43 (term -> term DIVIDE term .)
    PRODUCT         shift and go to state 58
    DIVIDE          shift and go to state 59

  ! PRODUCT         [ reduce using rule 43 (term -> term DIVIDE term .) ]
  ! DIVIDE          [ reduce using rule 43 (term -> term DIVIDE term .) ]


state 104

    (29) assign -> VARIABLE EQUAL assign_value .

    POINTCOMMA      reduce using rule 29 (assign -> VARIABLE EQUAL assign_value .)
    $end            reduce using rule 29 (assign -> VARIABLE EQUAL assign_value .)


state 105

    (30) assign_value -> expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 30 (assign_value -> expression .)
    $end            reduce using rule 30 (assign_value -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 106

    (31) assign_value -> boolean .

    POINTCOMMA      reduce using rule 31 (assign_value -> boolean .)
    $end            reduce using rule 31 (assign_value -> boolean .)


state 107

    (32) assign_value -> string .

    POINTCOMMA      reduce using rule 32 (assign_value -> string .)
    $end            reduce using rule 32 (assign_value -> string .)


state 108

    (59) expOpLog -> factor_exprlog oplogico factor_exprlog .

    POINTCOMMA      reduce using rule 59 (expOpLog -> factor_exprlog oplogico factor_exprlog .)
    $end            reduce using rule 59 (expOpLog -> factor_exprlog oplogico factor_exprlog .)
    RPAREN          reduce using rule 59 (expOpLog -> factor_exprlog oplogico factor_exprlog .)


state 109

    (61) factor_exprlog -> LPAREN . expCond RPAREN
    (62) expCond -> . expression operador expression
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    expCond                        shift and go to state 74
    expression                     shift and go to state 99
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 110

    (53) expEq -> factor_exprlog EQUALTO factor_exprlog .

    POINTCOMMA      reduce using rule 53 (expEq -> factor_exprlog EQUALTO factor_exprlog .)
    $end            reduce using rule 53 (expEq -> factor_exprlog EQUALTO factor_exprlog .)


state 111

    (56) expNotEq -> factor_exprlog NOTEQUALTO factor_exprlog .

    POINTCOMMA      reduce using rule 56 (expNotEq -> factor_exprlog NOTEQUALTO factor_exprlog .)
    $end            reduce using rule 56 (expNotEq -> factor_exprlog NOTEQUALTO factor_exprlog .)


state 112

    (51) expNeg -> NEGATION LPAREN expOpLog . RPAREN

    RPAREN          shift and go to state 142


state 113

    (61) factor_exprlog -> LPAREN expCond . RPAREN
    (58) expOpLog -> expCond . oplogico expCond
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    RPAREN          shift and go to state 119
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplogico                       shift and go to state 55

state 114

    (71) factor_expr -> LPAREN expression . RPAREN
    (60) expOpLog -> expression . oplogico expression
    (62) expCond -> expression . operador expression
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term
    (88) oplogico -> . AND
    (89) oplogico -> . OR
    (82) operador -> . GREATER
    (83) operador -> . LESS
    (84) operador -> . GREATEREQUAL
    (85) operador -> . LESSEQUAL
    (86) operador -> . EQUALTO
    (87) operador -> . NOTEQUALTO

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    GREATEREQUAL    shift and go to state 51
    LESSEQUAL       shift and go to state 52
    EQUALTO         shift and go to state 116
    NOTEQUALTO      shift and go to state 117

    oplogico                       shift and go to state 46
    operador                       shift and go to state 45

state 115

    (59) expOpLog -> factor_exprlog . oplogico factor_exprlog
    (88) oplogico -> . AND
    (89) oplogico -> . OR

    AND             shift and go to state 53
    OR              shift and go to state 54

    oplogico                       shift and go to state 61

state 116

    (86) operador -> EQUALTO .

    INCREMENT       reduce using rule 86 (operador -> EQUALTO .)
    DECREMENT       reduce using rule 86 (operador -> EQUALTO .)
    NUMBER          reduce using rule 86 (operador -> EQUALTO .)
    FLOAT           reduce using rule 86 (operador -> EQUALTO .)
    LPAREN          reduce using rule 86 (operador -> EQUALTO .)
    VARIABLE        reduce using rule 86 (operador -> EQUALTO .)


state 117

    (87) operador -> NOTEQUALTO .

    INCREMENT       reduce using rule 87 (operador -> NOTEQUALTO .)
    DECREMENT       reduce using rule 87 (operador -> NOTEQUALTO .)
    NUMBER          reduce using rule 87 (operador -> NOTEQUALTO .)
    FLOAT           reduce using rule 87 (operador -> NOTEQUALTO .)
    LPAREN          reduce using rule 87 (operador -> NOTEQUALTO .)
    VARIABLE        reduce using rule 87 (operador -> NOTEQUALTO .)


state 118

    (71) factor_expr -> LPAREN expression . RPAREN
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 119

    (61) factor_exprlog -> LPAREN expCond RPAREN .

    EQUALTO         reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)
    NOTEQUALTO      reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)
    AND             reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)
    OR              reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)
    POINTCOMMA      reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)
    $end            reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)
    RPAREN          reduce using rule 61 (factor_exprlog -> LPAREN expCond RPAREN .)


state 120

    (71) factor_expr -> LPAREN expression RPAREN .

    PRODUCT         reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    EQUALTO         reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    NOTEQUALTO      reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    LESS            reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    AND             reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    OR              reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    POINTCOMMA      reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    $end            reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 71 (factor_expr -> LPAREN expression RPAREN .)


state 121

    (66) group -> LPAREN variable RPAREN .

    INCREMENT       reduce using rule 66 (group -> LPAREN variable RPAREN .)
    DECREMENT       reduce using rule 66 (group -> LPAREN variable RPAREN .)
    PRODUCT         reduce using rule 66 (group -> LPAREN variable RPAREN .)
    DIVIDE          reduce using rule 66 (group -> LPAREN variable RPAREN .)
    PLUS            reduce using rule 66 (group -> LPAREN variable RPAREN .)
    MINUS           reduce using rule 66 (group -> LPAREN variable RPAREN .)
    EQUALTO         reduce using rule 66 (group -> LPAREN variable RPAREN .)
    NOTEQUALTO      reduce using rule 66 (group -> LPAREN variable RPAREN .)
    GREATER         reduce using rule 66 (group -> LPAREN variable RPAREN .)
    LESS            reduce using rule 66 (group -> LPAREN variable RPAREN .)
    GREATEREQUAL    reduce using rule 66 (group -> LPAREN variable RPAREN .)
    LESSEQUAL       reduce using rule 66 (group -> LPAREN variable RPAREN .)
    AND             reduce using rule 66 (group -> LPAREN variable RPAREN .)
    OR              reduce using rule 66 (group -> LPAREN variable RPAREN .)
    POINTCOMMA      reduce using rule 66 (group -> LPAREN variable RPAREN .)
    $end            reduce using rule 66 (group -> LPAREN variable RPAREN .)
    RPAREN          reduce using rule 66 (group -> LPAREN variable RPAREN .)


state 122

    (67) group -> LPAREN number RPAREN .

    INCREMENT       reduce using rule 67 (group -> LPAREN number RPAREN .)
    DECREMENT       reduce using rule 67 (group -> LPAREN number RPAREN .)
    PRODUCT         reduce using rule 67 (group -> LPAREN number RPAREN .)
    DIVIDE          reduce using rule 67 (group -> LPAREN number RPAREN .)
    PLUS            reduce using rule 67 (group -> LPAREN number RPAREN .)
    MINUS           reduce using rule 67 (group -> LPAREN number RPAREN .)
    EQUALTO         reduce using rule 67 (group -> LPAREN number RPAREN .)
    NOTEQUALTO      reduce using rule 67 (group -> LPAREN number RPAREN .)
    GREATER         reduce using rule 67 (group -> LPAREN number RPAREN .)
    LESS            reduce using rule 67 (group -> LPAREN number RPAREN .)
    GREATEREQUAL    reduce using rule 67 (group -> LPAREN number RPAREN .)
    LESSEQUAL       reduce using rule 67 (group -> LPAREN number RPAREN .)
    AND             reduce using rule 67 (group -> LPAREN number RPAREN .)
    OR              reduce using rule 67 (group -> LPAREN number RPAREN .)
    POINTCOMMA      reduce using rule 67 (group -> LPAREN number RPAREN .)
    $end            reduce using rule 67 (group -> LPAREN number RPAREN .)
    RPAREN          reduce using rule 67 (group -> LPAREN number RPAREN .)


state 123

    (66) group -> LPAREN variable . RPAREN

    RPAREN          shift and go to state 121


state 124

    (67) group -> LPAREN number . RPAREN

    RPAREN          shift and go to state 122


state 125

    (34) termS -> string . PLUS chain
    (38) value -> string .

  ! shift/reduce conflict for PLUS resolved as shift
    PLUS            shift and go to state 85
    POINTCOMMA      reduce using rule 38 (value -> string .)
    $end            reduce using rule 38 (value -> string .)

  ! PLUS            [ reduce using rule 38 (value -> string .) ]


state 126

    (34) termS -> string PLUS chain .

    POINTCOMMA      reduce using rule 34 (termS -> string PLUS chain .)
    $end            reduce using rule 34 (termS -> string PLUS chain .)
    PLUS            reduce using rule 34 (termS -> string PLUS chain .)


state 127

    (35) chain -> termS . PLUS value

    PLUS            shift and go to state 143


state 128

    (36) chain -> value .

    POINTCOMMA      reduce using rule 36 (chain -> value .)
    $end            reduce using rule 36 (chain -> value .)
    PLUS            reduce using rule 36 (chain -> value .)


state 129

    (37) value -> expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
    POINTCOMMA      reduce using rule 37 (value -> expression .)
    $end            reduce using rule 37 (value -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44

  ! PLUS            [ reduce using rule 37 (value -> expression .) ]


state 130

    (19) var_boolean -> declare_boolean EQUAL boolean_value .

    POINTCOMMA      reduce using rule 19 (var_boolean -> declare_boolean EQUAL boolean_value .)
    $end            reduce using rule 19 (var_boolean -> declare_boolean EQUAL boolean_value .)


state 131

    (21) boolean_value -> boolean .

    POINTCOMMA      reduce using rule 21 (boolean_value -> boolean .)
    $end            reduce using rule 21 (boolean_value -> boolean .)


state 132

    (22) boolean_value -> variable .

    POINTCOMMA      reduce using rule 22 (boolean_value -> variable .)
    $end            reduce using rule 22 (boolean_value -> variable .)


state 133

    (16) var_number -> declare_number EQUAL number_value .

    POINTCOMMA      reduce using rule 16 (var_number -> declare_number EQUAL number_value .)
    $end            reduce using rule 16 (var_number -> declare_number EQUAL number_value .)


state 134

    (18) number_value -> expression .
    (39) expression -> expression . PLUS term
    (40) expression -> expression . MINUS term

    POINTCOMMA      reduce using rule 18 (number_value -> expression .)
    $end            reduce using rule 18 (number_value -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 135

    (23) var_string -> declare_string EQUAL string_value .

    POINTCOMMA      reduce using rule 23 (var_string -> declare_string EQUAL string_value .)
    $end            reduce using rule 23 (var_string -> declare_string EQUAL string_value .)


state 136

    (25) string_value -> string .

    POINTCOMMA      reduce using rule 25 (string_value -> string .)
    $end            reduce using rule 25 (string_value -> string .)


state 137

    (26) string_value -> variable .

    POINTCOMMA      reduce using rule 26 (string_value -> variable .)
    $end            reduce using rule 26 (string_value -> variable .)


state 138

    (27) declare_generic -> declare_any EQUAL assign_value .

    POINTCOMMA      reduce using rule 27 (declare_generic -> declare_any EQUAL assign_value .)
    $end            reduce using rule 27 (declare_generic -> declare_any EQUAL assign_value .)


state 139

    (20) declare_boolean -> declare_any TWOPOINTS VARBOOLEAN .

    EQUAL           reduce using rule 20 (declare_boolean -> declare_any TWOPOINTS VARBOOLEAN .)


state 140

    (17) declare_number -> declare_any TWOPOINTS VARNUMBER .

    EQUAL           reduce using rule 17 (declare_number -> declare_any TWOPOINTS VARNUMBER .)


state 141

    (24) declare_string -> declare_any TWOPOINTS VARSTRING .

    EQUAL           reduce using rule 24 (declare_string -> declare_any TWOPOINTS VARSTRING .)


state 142

    (51) expNeg -> NEGATION LPAREN expOpLog RPAREN .

    POINTCOMMA      reduce using rule 51 (expNeg -> NEGATION LPAREN expOpLog RPAREN .)
    $end            reduce using rule 51 (expNeg -> NEGATION LPAREN expOpLog RPAREN .)


state 143

    (35) chain -> termS PLUS . value
    (37) value -> . expression
    (38) value -> . string
    (39) expression -> . expression PLUS term
    (40) expression -> . expression MINUS term
    (41) expression -> . term
    (78) string -> . NORMSTRING1
    (42) term -> . term PRODUCT term
    (43) term -> . term DIVIDE term
    (44) term -> . term1 INCREMENT
    (45) term -> . INCREMENT term1
    (46) term -> . term1 DECREMENT
    (47) term -> . DECREMENT term1
    (68) term -> . number
    (69) term -> . factor_expr
    (70) term -> . variable
    (63) term1 -> . number
    (64) term1 -> . variable
    (65) term1 -> . group
    (76) number -> . NUMBER
    (77) number -> . FLOAT
    (71) factor_expr -> . LPAREN expression RPAREN
    (81) variable -> . VARIABLE
    (66) group -> . LPAREN variable RPAREN
    (67) group -> . LPAREN number RPAREN

    NORMSTRING1     shift and go to state 36
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 24
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    LPAREN          shift and go to state 73
    VARIABLE        shift and go to state 72

    value                          shift and go to state 144
    expression                     shift and go to state 129
    string                         shift and go to state 145
    term                           shift and go to state 12
    term1                          shift and go to state 22
    number                         shift and go to state 25
    factor_expr                    shift and go to state 26
    variable                       shift and go to state 27
    group                          shift and go to state 33

state 144

    (35) chain -> termS PLUS value .

    POINTCOMMA      reduce using rule 35 (chain -> termS PLUS value .)
    $end            reduce using rule 35 (chain -> termS PLUS value .)
    PLUS            reduce using rule 35 (chain -> termS PLUS value .)


state 145

    (38) value -> string .

    POINTCOMMA      reduce using rule 38 (value -> string .)
    $end            reduce using rule 38 (value -> string .)
    PLUS            reduce using rule 38 (value -> string .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INCREMENT in state 47 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 47 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 47 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 47 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 48 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 48 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 48 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 48 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for PRODUCT in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for PRODUCT in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
